// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Repository;

#nullable disable

namespace SRUNPE.Migrations
{
    [DbContext(typeof(RepositoryContext))]
    [Migration("20240204210721_prueba1")]
    partial class prueba1
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Entities.Models.D_Acudiente.Acudiente", b =>
                {
                    b.Property<Guid>("AcudienteId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Apellidos")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CorreoElectronico")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Estado")
                        .HasColumnType("bit");

                    b.Property<string>("EstadoCivil")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("FechaNacimiento")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("FechaRegistro")
                        .HasColumnType("datetime2");

                    b.Property<string>("Genero")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nombres")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("NumeroIdentificacion")
                        .HasColumnType("int");

                    b.Property<string>("Ocupacion")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RelacionConEstudiante")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AcudienteId");

                    b.ToTable("Acudiente");

                    b.HasData(
                        new
                        {
                            AcudienteId = new Guid("6624b394-37c3-44b0-bd71-ce73f9c9b51b"),
                            Apellidos = "Pérez",
                            CorreoElectronico = "maria.perez@email.com",
                            Estado = true,
                            EstadoCivil = "Casada",
                            FechaNacimiento = new DateTime(1980, 5, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FechaRegistro = new DateTime(2024, 2, 4, 16, 7, 21, 846, DateTimeKind.Local).AddTicks(6328),
                            Genero = "Femenino",
                            Nombres = "María",
                            NumeroIdentificacion = 12345,
                            Ocupacion = "Ingeniera",
                            RelacionConEstudiante = "Madre"
                        },
                        new
                        {
                            AcudienteId = new Guid("96303924-3699-4056-9104-1df5567488df"),
                            Apellidos = "González",
                            CorreoElectronico = "juan.gonzalez@email.com",
                            Estado = true,
                            EstadoCivil = "Soltero",
                            FechaNacimiento = new DateTime(1975, 8, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FechaRegistro = new DateTime(2024, 2, 4, 16, 7, 21, 846, DateTimeKind.Local).AddTicks(6331),
                            Genero = "Masculino",
                            Nombres = "Juan",
                            NumeroIdentificacion = 67890,
                            Ocupacion = "Abogado",
                            RelacionConEstudiante = "Padre"
                        },
                        new
                        {
                            AcudienteId = new Guid("0ff17d5d-6183-4d58-bf1e-aeaea6a7aa62"),
                            Apellidos = "López",
                            CorreoElectronico = "ana.lopez@email.com",
                            Estado = true,
                            EstadoCivil = "Divorciada",
                            FechaNacimiento = new DateTime(1990, 3, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FechaRegistro = new DateTime(2024, 2, 4, 16, 7, 21, 846, DateTimeKind.Local).AddTicks(6334),
                            Genero = "Femenino",
                            Nombres = "Ana",
                            NumeroIdentificacion = 54321,
                            Ocupacion = "Médica",
                            RelacionConEstudiante = "Tutor Legal"
                        },
                        new
                        {
                            AcudienteId = new Guid("af1053d8-94d3-49b1-bb4a-58a17d74fb4e"),
                            Apellidos = "Martínez",
                            CorreoElectronico = "pedro.martinez@email.com",
                            Estado = true,
                            EstadoCivil = "Casado",
                            FechaNacimiento = new DateTime(1988, 7, 8, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FechaRegistro = new DateTime(2024, 2, 4, 16, 7, 21, 846, DateTimeKind.Local).AddTicks(6339),
                            Genero = "Masculino",
                            Nombres = "Pedro",
                            NumeroIdentificacion = 98765,
                            Ocupacion = "Profesor",
                            RelacionConEstudiante = "Padre"
                        },
                        new
                        {
                            AcudienteId = new Guid("2998699f-7e97-4804-8a2a-a2378c56f6fe"),
                            Apellidos = "Sánchez",
                            CorreoElectronico = "luis.sanchez@email.com",
                            Estado = true,
                            EstadoCivil = "Casado",
                            FechaNacimiento = new DateTime(1972, 12, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FechaRegistro = new DateTime(2024, 2, 4, 16, 7, 21, 846, DateTimeKind.Local).AddTicks(6342),
                            Genero = "Masculino",
                            Nombres = "Luis",
                            NumeroIdentificacion = 13579,
                            Ocupacion = "Contador",
                            RelacionConEstudiante = "Padre"
                        },
                        new
                        {
                            AcudienteId = new Guid("55f9121f-6262-40ab-b33c-9feec7cf9b75"),
                            Apellidos = "Rodríguez",
                            CorreoElectronico = "carlos.rodriguez@email.com",
                            Estado = true,
                            EstadoCivil = "Soltero",
                            FechaNacimiento = new DateTime(1985, 9, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FechaRegistro = new DateTime(2024, 2, 4, 16, 7, 21, 846, DateTimeKind.Local).AddTicks(6344),
                            Genero = "Masculino",
                            Nombres = "Carlos",
                            NumeroIdentificacion = 24680,
                            Ocupacion = "Ingeniero Civil",
                            RelacionConEstudiante = "Tío"
                        },
                        new
                        {
                            AcudienteId = new Guid("54600650-7007-405d-8f82-8c4d584b3af5"),
                            Apellidos = "Gómez",
                            CorreoElectronico = "laura.gomez@email.com",
                            Estado = true,
                            EstadoCivil = "Divorciada",
                            FechaNacimiento = new DateTime(1992, 6, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FechaRegistro = new DateTime(2024, 2, 4, 16, 7, 21, 846, DateTimeKind.Local).AddTicks(6346),
                            Genero = "Femenino",
                            Nombres = "Laura",
                            NumeroIdentificacion = 86420,
                            Ocupacion = "Médica",
                            RelacionConEstudiante = "Madre"
                        },
                        new
                        {
                            AcudienteId = new Guid("71443ae2-02ea-434c-af26-67c86d5769ec"),
                            Apellidos = "Hernández",
                            CorreoElectronico = "andres.hernandez@email.com",
                            Estado = true,
                            EstadoCivil = "Casado",
                            FechaNacimiento = new DateTime(1979, 11, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FechaRegistro = new DateTime(2024, 2, 4, 16, 7, 21, 846, DateTimeKind.Local).AddTicks(6349),
                            Genero = "Masculino",
                            Nombres = "Andrés",
                            NumeroIdentificacion = 97531,
                            Ocupacion = "Arquitecto",
                            RelacionConEstudiante = "Padrino"
                        },
                        new
                        {
                            AcudienteId = new Guid("5c7b53c8-4032-4b6f-b55a-0f39be78ef04"),
                            Apellidos = "Díaz",
                            CorreoElectronico = "sofia.diaz@email.com",
                            Estado = true,
                            EstadoCivil = "Soltera",
                            FechaNacimiento = new DateTime(1987, 4, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FechaRegistro = new DateTime(2024, 2, 4, 16, 7, 21, 846, DateTimeKind.Local).AddTicks(6351),
                            Genero = "Femenino",
                            Nombres = "Sofía",
                            NumeroIdentificacion = 75319,
                            Ocupacion = "Profesora",
                            RelacionConEstudiante = "Tía"
                        },
                        new
                        {
                            AcudienteId = new Guid("285915f3-78f9-44c0-85e4-dccc0f2f6e6a"),
                            Apellidos = "Luna",
                            CorreoElectronico = "roberto.luna@email.com",
                            Estado = true,
                            EstadoCivil = "Viudo",
                            FechaNacimiento = new DateTime(1970, 1, 8, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FechaRegistro = new DateTime(2024, 2, 4, 16, 7, 21, 846, DateTimeKind.Local).AddTicks(6353),
                            Genero = "Masculino",
                            Nombres = "Roberto",
                            NumeroIdentificacion = 10293,
                            Ocupacion = "Jubilado",
                            RelacionConEstudiante = "Abuelo"
                        });
                });

            modelBuilder.Entity("Entities.Models.D_Acudiente.DireccionAcudiente", b =>
                {
                    b.Property<Guid>("DireccionAcudienteId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Calle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CiudadLocalidad")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CodigoPostal")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ColoniaBarrio")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EstadoProvincia")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Pais")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("DireccionAcudienteId");

                    b.ToTable("DireccionAcudiente");

                    b.HasData(
                        new
                        {
                            DireccionAcudienteId = new Guid("0de111a7-810f-4b75-b957-643cbe3d7b74"),
                            Calle = "Calle 72",
                            CiudadLocalidad = "Bogotá",
                            CodigoPostal = "110231",
                            ColoniaBarrio = "Chapinero",
                            EstadoProvincia = "Bogotá D.C.",
                            Pais = "Colombia"
                        },
                        new
                        {
                            DireccionAcudienteId = new Guid("28f1ce21-eb12-40bc-bca5-613a3f000a14"),
                            Calle = "Calle 72",
                            CiudadLocalidad = "Bogotá",
                            CodigoPostal = "110231",
                            ColoniaBarrio = "Chapinero",
                            EstadoProvincia = "Bogotá D.C.",
                            Pais = "Colombia"
                        },
                        new
                        {
                            DireccionAcudienteId = new Guid("5e4f4401-731e-4766-8776-5f1a2a423d98"),
                            Calle = "Carrera 10",
                            CiudadLocalidad = "Bogotá",
                            CodigoPostal = "110321",
                            ColoniaBarrio = "La Candelaria",
                            EstadoProvincia = "Bogotá D.C.",
                            Pais = "Colombia"
                        },
                        new
                        {
                            DireccionAcudienteId = new Guid("84351207-d6e1-46ab-aa22-7f881163d464"),
                            Calle = "Avenida Boyacá",
                            CiudadLocalidad = "Bogotá",
                            CodigoPostal = "110511",
                            ColoniaBarrio = "Fontibón",
                            EstadoProvincia = "Bogotá D.C.",
                            Pais = "Colombia"
                        },
                        new
                        {
                            DireccionAcudienteId = new Guid("a657e50a-2d15-407d-8634-5710908dbfb3"),
                            Calle = "Calle 80",
                            CiudadLocalidad = "Bogotá",
                            CodigoPostal = "110841",
                            ColoniaBarrio = "Engativá",
                            EstadoProvincia = "Bogotá D.C.",
                            Pais = "Colombia"
                        },
                        new
                        {
                            DireccionAcudienteId = new Guid("f6b8c5f8-3951-442a-ac5f-2605fa72cf0b"),
                            Calle = "Carrera 7",
                            CiudadLocalidad = "Bogotá",
                            CodigoPostal = "110171",
                            ColoniaBarrio = "Usaquén",
                            EstadoProvincia = "Bogotá D.C.",
                            Pais = "Colombia"
                        },
                        new
                        {
                            DireccionAcudienteId = new Guid("48116869-2292-499f-9e7d-60ec2ea28d65"),
                            Calle = "Avenida 68",
                            CiudadLocalidad = "Bogotá",
                            CodigoPostal = "110841",
                            ColoniaBarrio = "Kennedy",
                            EstadoProvincia = "Bogotá D.C.",
                            Pais = "Colombia"
                        });
                });

            modelBuilder.Entity("Entities.Models.D_Acudiente.TelefonoAcudiente", b =>
                {
                    b.Property<Guid>("TelefonoAcudienteId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("AcudienteId")
                        .HasColumnType("int");

                    b.Property<string>("Indicativo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Numero")
                        .HasColumnType("int");

                    b.Property<string>("Tipo")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TelefonoAcudienteId");

                    b.ToTable("TelefonoAcudiente");

                    b.HasData(
                        new
                        {
                            TelefonoAcudienteId = new Guid("b9bf66ae-756e-4c76-9253-f836b13ebe02"),
                            AcudienteId = 1,
                            Indicativo = "+1",
                            Numero = -4135,
                            Tipo = "Móvil"
                        },
                        new
                        {
                            TelefonoAcudienteId = new Guid("d8624544-37e2-4ca1-aaf3-8e53e79296db"),
                            AcudienteId = 2,
                            Indicativo = "+1",
                            Numero = -6975,
                            Tipo = "Móvil"
                        },
                        new
                        {
                            TelefonoAcudienteId = new Guid("08fe1deb-a3d4-43c4-9c60-2c511d544370"),
                            AcudienteId = 3,
                            Indicativo = "+1",
                            Numero = -5357,
                            Tipo = "Fijo"
                        },
                        new
                        {
                            TelefonoAcudienteId = new Guid("98f4bc5e-f60b-494a-876b-db81838f186c"),
                            AcudienteId = 4,
                            Indicativo = "+1",
                            Numero = -5753,
                            Tipo = "Móvil"
                        },
                        new
                        {
                            TelefonoAcudienteId = new Guid("4502dbae-1482-4d71-a625-9a1d93db5b71"),
                            AcudienteId = 5,
                            Indicativo = "+1",
                            Numero = 911,
                            Tipo = "Emergencia"
                        },
                        new
                        {
                            TelefonoAcudienteId = new Guid("8c760710-ccae-487b-a173-4ac1cb961806"),
                            AcudienteId = 1,
                            Indicativo = "+1",
                            Numero = -667,
                            Tipo = "Móvil"
                        },
                        new
                        {
                            TelefonoAcudienteId = new Guid("b2fa0b63-ebb4-4f92-8b03-c81c019cc0d9"),
                            AcudienteId = 2,
                            Indicativo = "+1",
                            Numero = -1889,
                            Tipo = "Móvil"
                        },
                        new
                        {
                            TelefonoAcudienteId = new Guid("c0af4df5-4c25-469b-bdb2-e5e799a0e040"),
                            AcudienteId = 3,
                            Indicativo = "+1",
                            Numero = -3111,
                            Tipo = "Fijo"
                        },
                        new
                        {
                            TelefonoAcudienteId = new Guid("13380ff2-fb3f-4640-ad8c-6168a37014a7"),
                            AcudienteId = 4,
                            Indicativo = "+1",
                            Numero = -4333,
                            Tipo = "Móvil"
                        },
                        new
                        {
                            TelefonoAcudienteId = new Guid("53b3f7c5-7e02-44f4-aba6-72d183a048f6"),
                            AcudienteId = 5,
                            Indicativo = "+1",
                            Numero = -5555,
                            Tipo = "Emergencia"
                        });
                });

            modelBuilder.Entity("Entities.Models.D_DepartamentoAcademico.Aulas", b =>
                {
                    b.Property<Guid>("AulaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Capacidad")
                        .HasColumnType("int");

                    b.Property<string>("EstadoAula")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HorarioDisponibilidad")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NombreNumero")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NotasAdicionales")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RegistrosIncidentesProblemas")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ResponsableAula")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TipoAula")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Ubicacion")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UltimaActualizacion")
                        .HasColumnType("datetime2");

                    b.HasKey("AulaId");

                    b.ToTable("Aulas");

                    b.HasData(
                        new
                        {
                            AulaId = new Guid("70520c79-41d9-4655-a137-6cdf1c2bf646"),
                            Capacidad = 50,
                            EstadoAula = "Disponible",
                            HorarioDisponibilidad = "Lunes a Viernes, 08:00 AM - 06:00 PM",
                            NombreNumero = "Aula 101",
                            NotasAdicionales = "Equipada con proyector",
                            RegistrosIncidentesProblemas = "Ninguno",
                            ResponsableAula = "Profesor Responsable 1",
                            TipoAula = "Salón de Clases",
                            Ubicacion = "Edificio Principal",
                            UltimaActualizacion = new DateTime(2023, 9, 15, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            AulaId = new Guid("dadbeac7-9882-4740-8158-a0e8a4f51bf5"),
                            Capacidad = 30,
                            EstadoAula = "Ocupado",
                            HorarioDisponibilidad = "Lunes a Viernes, 10:00 AM - 05:00 PM",
                            NombreNumero = "Aula 102",
                            NotasAdicionales = "Equipado con computadoras de última generación",
                            RegistrosIncidentesProblemas = "Reporte de fallo en una computadora",
                            ResponsableAula = "Profesor Responsable 2",
                            TipoAula = "Laboratorio de Informática",
                            Ubicacion = "Edificio de Ciencias",
                            UltimaActualizacion = new DateTime(2023, 9, 10, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            AulaId = new Guid("fd9033db-604b-4c0f-bcc2-41c04bce4641"),
                            Capacidad = 100,
                            EstadoAula = "Disponible",
                            HorarioDisponibilidad = "Disponible previa reserva",
                            NombreNumero = "Aula 103",
                            NotasAdicionales = "Equipada con proyector y sistema de sonido",
                            RegistrosIncidentesProblemas = "Ninguno",
                            ResponsableAula = "Personal de Eventos",
                            TipoAula = "Sala de Conferencias",
                            Ubicacion = "Edificio de Eventos",
                            UltimaActualizacion = new DateTime(2023, 9, 20, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            AulaId = new Guid("268625d1-459f-4a92-bbb8-907a76d8f8c6"),
                            Capacidad = 40,
                            EstadoAula = "En Mantenimiento",
                            HorarioDisponibilidad = "No disponible temporalmente",
                            NombreNumero = "Aula 104",
                            NotasAdicionales = "Mantenimiento programado",
                            RegistrosIncidentesProblemas = "Reporte de fugas de agua en el techo",
                            ResponsableAula = "Personal de Mantenimiento",
                            TipoAula = "Salón de Clases",
                            Ubicacion = "Edificio Principal",
                            UltimaActualizacion = new DateTime(2023, 9, 25, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            AulaId = new Guid("01ad2377-7fa3-4b14-9ae7-9540bdd52cee"),
                            Capacidad = 10,
                            EstadoAula = "Disponible",
                            HorarioDisponibilidad = "Lunes a Domingo, 09:00 AM - 11:00 PM",
                            NombreNumero = "Aula 105",
                            NotasAdicionales = "Área de estudio tranquila",
                            RegistrosIncidentesProblemas = "Ninguno",
                            ResponsableAula = "Bibliotecario",
                            TipoAula = "Sala de Estudio",
                            Ubicacion = "Biblioteca",
                            UltimaActualizacion = new DateTime(2023, 9, 18, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("Entities.Models.D_DepartamentoAcademico.Cursos", b =>
                {
                    b.Property<Guid>("CursoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AulasAsignadas")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Codigo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Curso")
                        .HasColumnType("int");

                    b.Property<string>("DepartamentoAcademico")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("FechaLimiteInscripcion")
                        .HasColumnType("datetime2");

                    b.Property<string>("MetodosEnsenanza")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nivel")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProfesorAsignado")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CursoId");

                    b.ToTable("Cursos");

                    b.HasData(
                        new
                        {
                            CursoId = new Guid("55d9da66-dce5-4623-b65c-f847bca3c5ed"),
                            AulasAsignadas = "Aula 101, Aula 102",
                            Codigo = "CS101",
                            Curso = 101,
                            DepartamentoAcademico = "Ciencias de la Computación",
                            Descripcion = "Introducción a la Programación",
                            FechaLimiteInscripcion = new DateTime(2023, 9, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            MetodosEnsenanza = "Clases magistrales, laboratorios prácticos",
                            Nivel = "Primer Semestre",
                            ProfesorAsignado = "Profesor 1"
                        },
                        new
                        {
                            CursoId = new Guid("879a965e-f936-49e2-8c38-f963ffd4525c"),
                            AulasAsignadas = "Classroom 201, Classroom 202",
                            Codigo = "ENG201",
                            Curso = 201,
                            DepartamentoAcademico = "English Department",
                            Descripcion = "Advanced English Composition",
                            FechaLimiteInscripcion = new DateTime(2023, 10, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            MetodosEnsenanza = "Lectures, writing assignments, group discussions",
                            Nivel = "Second Semester",
                            ProfesorAsignado = "Professor 2"
                        },
                        new
                        {
                            CursoId = new Guid("afe1908f-d23e-4de6-9276-d96fb740f829"),
                            AulasAsignadas = "Math Classroom 301",
                            Codigo = "MATH301",
                            Curso = 301,
                            DepartamentoAcademico = "Mathematics Department",
                            Descripcion = "Advanced Calculus",
                            FechaLimiteInscripcion = new DateTime(2023, 9, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            MetodosEnsenanza = "Lectures, problem sets, exams",
                            Nivel = "Third Semester",
                            ProfesorAsignado = "Professor 3"
                        },
                        new
                        {
                            CursoId = new Guid("d2b19a24-1de8-4c82-8917-4e612e99c201"),
                            AulasAsignadas = "Chemistry Lab 201",
                            Codigo = "CHEM401",
                            Curso = 401,
                            DepartamentoAcademico = "Chemistry Department",
                            Descripcion = "Organic Chemistry",
                            FechaLimiteInscripcion = new DateTime(2023, 10, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            MetodosEnsenanza = "Lectures, laboratory experiments",
                            Nivel = "Second Semester",
                            ProfesorAsignado = "Professor 4"
                        },
                        new
                        {
                            CursoId = new Guid("97fed96b-01eb-4b77-8b08-b5640d3097b1"),
                            AulasAsignadas = "History Classroom 101",
                            Codigo = "HIST501",
                            Curso = 501,
                            DepartamentoAcademico = "History Department",
                            Descripcion = "Introduction to History",
                            FechaLimiteInscripcion = new DateTime(2023, 9, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            MetodosEnsenanza = "Lectures, discussions, research papers",
                            Nivel = "First Semester",
                            ProfesorAsignado = "Professor 5"
                        });
                });

            modelBuilder.Entity("Entities.Models.D_DepartamentoAcademico.Horarios", b =>
                {
                    b.Property<Guid>("HorarioId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("DiaSemana")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DuracionClaseMinutos")
                        .HasColumnType("int");

                    b.Property<string>("EstadoHorario")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("FechaFinClases")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("FechaInicioClases")
                        .HasColumnType("datetime2");

                    b.Property<string>("GrupoSeccion")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<TimeSpan>("HoraFin")
                        .HasColumnType("time");

                    b.Property<TimeSpan>("HoraInicio")
                        .HasColumnType("time");

                    b.Property<string>("NotificacionCambioHorario")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PeriodoAcademico")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProfesorAsistente")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SalaAula")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("HorarioId");

                    b.ToTable("Horarios");

                    b.HasData(
                        new
                        {
                            HorarioId = new Guid("9ef9e7ed-7fe8-434b-b8d7-1a1538079249"),
                            DiaSemana = "Lunes",
                            DuracionClaseMinutos = 120,
                            EstadoHorario = "Activo",
                            FechaFinClases = new DateTime(2023, 12, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FechaInicioClases = new DateTime(2023, 9, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            GrupoSeccion = "Grupo A",
                            HoraFin = new TimeSpan(0, 11, 0, 0, 0),
                            HoraInicio = new TimeSpan(0, 9, 0, 0, 0),
                            NotificacionCambioHorario = "No",
                            PeriodoAcademico = "Semestre de Otoño",
                            ProfesorAsistente = "Profesor Asistente 1",
                            SalaAula = "Aula 101"
                        },
                        new
                        {
                            HorarioId = new Guid("3844d98a-fafd-4f5e-bc15-65f724499846"),
                            DiaSemana = "Martes",
                            DuracionClaseMinutos = 120,
                            EstadoHorario = "Activo",
                            FechaFinClases = new DateTime(2023, 4, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FechaInicioClases = new DateTime(2023, 1, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            GrupoSeccion = "Grupo B",
                            HoraFin = new TimeSpan(0, 16, 0, 0, 0),
                            HoraInicio = new TimeSpan(0, 14, 0, 0, 0),
                            NotificacionCambioHorario = "Sí",
                            PeriodoAcademico = "Semestre de Primavera",
                            ProfesorAsistente = "Profesor Asistente 2",
                            SalaAula = "Aula 203"
                        },
                        new
                        {
                            HorarioId = new Guid("460c3d2b-7dde-4f87-b293-c25dc8cea55c"),
                            DiaSemana = "Miércoles",
                            DuracionClaseMinutos = 120,
                            EstadoHorario = "Activo",
                            FechaFinClases = new DateTime(2023, 8, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FechaInicioClases = new DateTime(2023, 6, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            GrupoSeccion = "Grupo C",
                            HoraFin = new TimeSpan(0, 13, 30, 0, 0),
                            HoraInicio = new TimeSpan(0, 11, 30, 0, 0),
                            NotificacionCambioHorario = "No",
                            PeriodoAcademico = "Semestre de Verano",
                            ProfesorAsistente = "Profesor Asistente 3",
                            SalaAula = "Aula 305"
                        },
                        new
                        {
                            HorarioId = new Guid("16840dc1-34f1-4148-aa84-eed0c8f50fc9"),
                            DiaSemana = "Jueves",
                            DuracionClaseMinutos = 120,
                            EstadoHorario = "Activo",
                            FechaFinClases = new DateTime(2024, 3, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FechaInicioClases = new DateTime(2023, 11, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            GrupoSeccion = "Grupo D",
                            HoraFin = new TimeSpan(0, 18, 30, 0, 0),
                            HoraInicio = new TimeSpan(0, 16, 30, 0, 0),
                            NotificacionCambioHorario = "Sí",
                            PeriodoAcademico = "Semestre de Invierno",
                            ProfesorAsistente = "Profesor Asistente 4",
                            SalaAula = "Aula 401"
                        },
                        new
                        {
                            HorarioId = new Guid("658da267-2633-4f39-98d4-be09059039cd"),
                            DiaSemana = "Viernes",
                            DuracionClaseMinutos = 120,
                            EstadoHorario = "Activo",
                            FechaFinClases = new DateTime(2023, 4, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FechaInicioClases = new DateTime(2023, 1, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            GrupoSeccion = "Grupo E",
                            HoraFin = new TimeSpan(0, 10, 0, 0, 0),
                            HoraInicio = new TimeSpan(0, 8, 0, 0, 0),
                            NotificacionCambioHorario = "No",
                            PeriodoAcademico = "Semestre de Primavera",
                            ProfesorAsistente = "Profesor Asistente 5",
                            SalaAula = "Aula 102"
                        });
                });

            modelBuilder.Entity("Entities.Models.D_DepartamentoAcademico.Materias", b =>
                {
                    b.Property<Guid>("MateriaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("DepartamentoAcademico")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Descripcion")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Estado")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GrupoSeccionMateria")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MetodosEnsenanza")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ModalidadEnsenanza")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nivel")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nombre")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NotasAdicionales")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProfesorAsignado")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("MateriaId");

                    b.ToTable("Materias");

                    b.HasData(
                        new
                        {
                            MateriaId = new Guid("c2cf0895-8999-4d74-ba75-aab009b25b8e"),
                            DepartamentoAcademico = "Departamento de Matemáticas",
                            Descripcion = "Curso de Matemáticas Avanzadas",
                            Estado = "En progreso",
                            GrupoSeccionMateria = "Grupo A",
                            MetodosEnsenanza = "Clases teóricas y prácticas",
                            ModalidadEnsenanza = "Presencial",
                            Nivel = "Avanzado",
                            Nombre = "Matemáticas",
                            NotasAdicionales = "Se requiere calculadora científica.",
                            ProfesorAsignado = "Profesor Matemático"
                        },
                        new
                        {
                            MateriaId = new Guid("a5c6cb77-2fb2-4e82-b7cd-3837a338d9d6"),
                            DepartamentoAcademico = "Departamento de Historia",
                            Descripcion = "Curso de Historia Mundial",
                            Estado = "Inscripciones abiertas",
                            GrupoSeccionMateria = "Grupo B",
                            MetodosEnsenanza = "Conferencias y debates",
                            ModalidadEnsenanza = "Presencial",
                            Nivel = "Intermedio",
                            Nombre = "Historia",
                            NotasAdicionales = "Recomendado para estudiantes de Historia.",
                            ProfesorAsignado = "Profesor Historiador"
                        },
                        new
                        {
                            MateriaId = new Guid("68302346-9481-4b79-9439-8618e209e17f"),
                            DepartamentoAcademico = "Departamento de Informática",
                            Descripcion = "Curso de Ciencias de la Computación",
                            Estado = "En progreso",
                            GrupoSeccionMateria = "Grupo C",
                            MetodosEnsenanza = "Clases virtuales y proyectos prácticos",
                            ModalidadEnsenanza = "En línea",
                            Nivel = "Avanzado",
                            Nombre = "Ciencias de la Computación",
                            NotasAdicionales = "Requiere acceso a una computadora.",
                            ProfesorAsignado = "Profesor de Informática"
                        },
                        new
                        {
                            MateriaId = new Guid("183491a1-8403-4b0a-afde-7645b1a4ccf4"),
                            DepartamentoAcademico = "Departamento de Literatura",
                            Descripcion = "Curso de Literatura Universal",
                            Estado = "Inscripciones abiertas",
                            GrupoSeccionMateria = "Grupo D",
                            MetodosEnsenanza = "Lecturas y discusiones literarias",
                            ModalidadEnsenanza = "Presencial",
                            Nivel = "Intermedio",
                            Nombre = "Literatura",
                            NotasAdicionales = "Apto para amantes de la lectura.",
                            ProfesorAsignado = "Profesor Literario"
                        },
                        new
                        {
                            MateriaId = new Guid("dbe485f7-72ee-40a3-ae62-1e751b1bb9c4"),
                            DepartamentoAcademico = "Departamento de Física",
                            Descripcion = "Curso de Física Avanzada",
                            Estado = "Completo",
                            GrupoSeccionMateria = "Grupo E",
                            MetodosEnsenanza = "Experimentos y clases teóricas",
                            ModalidadEnsenanza = "Presencial",
                            Nivel = "Avanzado",
                            Nombre = "Física",
                            NotasAdicionales = "Requiere conocimientos previos de física.",
                            ProfesorAsignado = "Profesor de Física"
                        },
                        new
                        {
                            MateriaId = new Guid("0a48898d-9e2b-4da0-ae5e-630664883ff4"),
                            DepartamentoAcademico = "Departamento de Economía",
                            Descripcion = "Curso de Economía Moderna",
                            Estado = "En progreso",
                            GrupoSeccionMateria = "Grupo F",
                            MetodosEnsenanza = "Clases virtuales y análisis económico",
                            ModalidadEnsenanza = "En línea",
                            Nivel = "Intermedio",
                            Nombre = "Economía",
                            NotasAdicionales = "Abordaremos temas financieros actuales.",
                            ProfesorAsignado = "Profesor Economista"
                        },
                        new
                        {
                            MateriaId = new Guid("c2f8043d-0ad0-4420-9122-248c237606f5"),
                            DepartamentoAcademico = "Departamento de Arte",
                            Descripcion = "Curso de Arte Contemporáneo",
                            Estado = "Inscripciones abiertas",
                            GrupoSeccionMateria = "Grupo G",
                            MetodosEnsenanza = "Prácticas artísticas y exposiciones",
                            ModalidadEnsenanza = "Presencial",
                            Nivel = "Intermedio",
                            Nombre = "Arte",
                            NotasAdicionales = "No se requiere experiencia previa en arte.",
                            ProfesorAsignado = "Profesor de Arte"
                        });
                });

            modelBuilder.Entity("Entities.Models.D_Estudiante.CandidatoEstudiante", b =>
                {
                    b.Property<Guid>("CandidatoEstudianteId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Apellido")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Direccion")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("FechaNacimiento")
                        .HasColumnType("datetime2");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.Property<int>("Telefono")
                        .HasColumnType("int");

                    b.Property<string>("TipoPersona")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CandidatoEstudianteId");

                    b.ToTable("CandidatoEstudiantes");

                    b.HasData(
                        new
                        {
                            CandidatoEstudianteId = new Guid("74b1e102-80f2-43c4-a35a-e772aa7c9256"),
                            Apellido = "Acuña",
                            Direccion = "calle 10",
                            FechaNacimiento = new DateTime(1995, 5, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Nombre = "Axl",
                            Telefono = 123456,
                            TipoPersona = "Estudiante"
                        },
                        new
                        {
                            CandidatoEstudianteId = new Guid("327fb1ce-2908-48b3-8bf6-445d9d730def"),
                            Apellido = "Castro",
                            Direccion = "calle 9",
                            FechaNacimiento = new DateTime(1990, 8, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Nombre = "Juan",
                            Telefono = 123456,
                            TipoPersona = "Estudiante"
                        },
                        new
                        {
                            CandidatoEstudianteId = new Guid("dba06ff8-366b-409a-b4a7-47fb78aa2e74"),
                            Apellido = "Sánchez",
                            Direccion = "calle 8",
                            FechaNacimiento = new DateTime(1987, 3, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Nombre = "Carlos",
                            Telefono = 123456,
                            TipoPersona = "Estudiante"
                        },
                        new
                        {
                            CandidatoEstudianteId = new Guid("1b951756-e8e7-495c-94be-324bb9f5144d"),
                            Apellido = "López",
                            Direccion = "calle 7",
                            FechaNacimiento = new DateTime(2000, 11, 7, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Nombre = "Laura",
                            Telefono = 123456,
                            TipoPersona = "Estudiante"
                        },
                        new
                        {
                            CandidatoEstudianteId = new Guid("cb9f6dc3-1f86-49dd-be20-250be8344931"),
                            Apellido = "Ramírez",
                            Direccion = "calle 6",
                            FechaNacimiento = new DateTime(1998, 9, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Nombre = "Pedro",
                            Telefono = 123456,
                            TipoPersona = "Estudiante"
                        },
                        new
                        {
                            CandidatoEstudianteId = new Guid("68469754-6f4f-4f66-81bd-96cf39ef664a"),
                            Apellido = "Martínez",
                            Direccion = "calle 5",
                            FechaNacimiento = new DateTime(1993, 7, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Nombre = "Ana",
                            Telefono = 123456,
                            TipoPersona = "Estudiante"
                        },
                        new
                        {
                            CandidatoEstudianteId = new Guid("3ccab877-a601-4a15-90f5-36985c897ae1"),
                            Apellido = "Fernández",
                            Direccion = "calle 4",
                            FechaNacimiento = new DateTime(1989, 12, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Nombre = "Roberto",
                            Telefono = 123456,
                            TipoPersona = "Estudiante"
                        },
                        new
                        {
                            CandidatoEstudianteId = new Guid("f743d562-e940-4647-9030-8649288a8671"),
                            Apellido = "Gómez",
                            Direccion = "calle 3",
                            FechaNacimiento = new DateTime(1996, 2, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Nombre = "Isabel",
                            Telefono = 123456,
                            TipoPersona = "Estudiante"
                        },
                        new
                        {
                            CandidatoEstudianteId = new Guid("7ee9663b-de19-4825-96f3-d1b3da730dd1"),
                            Apellido = "Díaz",
                            Direccion = "calle 2",
                            FechaNacimiento = new DateTime(1991, 6, 14, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Nombre = "Francisco",
                            Telefono = 123456,
                            TipoPersona = "Estudiante"
                        },
                        new
                        {
                            CandidatoEstudianteId = new Guid("08314d06-16cc-4c5f-992b-20b1342a1268"),
                            Apellido = "Hernández",
                            Direccion = "calle 1",
                            FechaNacimiento = new DateTime(1994, 4, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Nombre = "Sofía",
                            Telefono = 123456,
                            TipoPersona = "Estudiante"
                        });
                });

            modelBuilder.Entity("Entities.Models.D_Estudiante.Cupo", b =>
                {
                    b.Property<Guid>("CupoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("CantidadDisponible")
                        .HasColumnType("int");

                    b.Property<string>("Descripcion")
                        .HasColumnType("nvarchar(max)");

                    b.Property<TimeSpan>("Duracion")
                        .HasColumnType("time");

                    b.Property<bool>("Estado")
                        .HasColumnType("bit");

                    b.Property<DateTime>("FechaFin")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("FechaInicio")
                        .HasColumnType("datetime2");

                    b.Property<string>("Ubicacion")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CupoId");

                    b.ToTable("Cupo");

                    b.HasData(
                        new
                        {
                            CupoId = new Guid("6bde23dc-75aa-4d1f-bd4a-af0b4f8418d5"),
                            CantidadDisponible = 10,
                            Descripcion = "Cupo para el evento principal",
                            Duracion = new TimeSpan(0, 2, 0, 0, 0),
                            Estado = true,
                            FechaFin = new DateTime(2024, 3, 4, 16, 7, 21, 846, DateTimeKind.Local).AddTicks(6982),
                            FechaInicio = new DateTime(2024, 2, 4, 16, 7, 21, 846, DateTimeKind.Local).AddTicks(6981),
                            Ubicacion = "Salón principal"
                        },
                        new
                        {
                            CupoId = new Guid("739b37a1-680c-465e-8f04-e79cabd209c8"),
                            CantidadDisponible = 5,
                            Descripcion = "Cupo para el taller de programación",
                            Duracion = new TimeSpan(0, 3, 0, 0, 0),
                            Estado = true,
                            FechaFin = new DateTime(2024, 4, 4, 16, 7, 21, 846, DateTimeKind.Local).AddTicks(7000),
                            FechaInicio = new DateTime(2024, 2, 4, 16, 7, 21, 846, DateTimeKind.Local).AddTicks(7000),
                            Ubicacion = "Aula 101"
                        },
                        new
                        {
                            CupoId = new Guid("8ac36878-ffe4-4d1a-ac7a-a9a545c11683"),
                            CantidadDisponible = 20,
                            Descripcion = "Cupo para el seminario de marketing",
                            Duracion = new TimeSpan(0, 4, 0, 0, 0),
                            Estado = true,
                            FechaFin = new DateTime(2024, 5, 4, 16, 7, 21, 846, DateTimeKind.Local).AddTicks(7003),
                            FechaInicio = new DateTime(2024, 2, 4, 16, 7, 21, 846, DateTimeKind.Local).AddTicks(7003),
                            Ubicacion = "Aula 102"
                        },
                        new
                        {
                            CupoId = new Guid("e284aada-d51c-4eda-afe5-328ac4319581"),
                            CantidadDisponible = 15,
                            Descripcion = "Cupo para el curso de diseño gráfico",
                            Duracion = new TimeSpan(0, 2, 0, 0, 0),
                            Estado = true,
                            FechaFin = new DateTime(2024, 6, 4, 16, 7, 21, 846, DateTimeKind.Local).AddTicks(7006),
                            FechaInicio = new DateTime(2024, 2, 4, 16, 7, 21, 846, DateTimeKind.Local).AddTicks(7006),
                            Ubicacion = "Aula 103"
                        },
                        new
                        {
                            CupoId = new Guid("1b843e4e-7d3d-4545-b03e-a7019c0d03a5"),
                            CantidadDisponible = 30,
                            Descripcion = "Cupo para el evento de networking",
                            Duracion = new TimeSpan(0, 1, 0, 0, 0),
                            Estado = true,
                            FechaFin = new DateTime(2024, 7, 4, 16, 7, 21, 846, DateTimeKind.Local).AddTicks(7009),
                            FechaInicio = new DateTime(2024, 2, 4, 16, 7, 21, 846, DateTimeKind.Local).AddTicks(7008),
                            Ubicacion = "Aula 104"
                        });
                });

            modelBuilder.Entity("Entities.Models.D_Estudiante.EstudianteDocumentos", b =>
                {
                    b.Property<Guid>("EstudianteDocumentosId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CandidatoEstudianteId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Estado")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("FechaActualizacion")
                        .HasColumnType("datetime2");

                    b.Property<string>("NombreDocumento")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("NumeroDocumento")
                        .HasColumnType("int");

                    b.Property<string>("Observaciones")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Tamaño")
                        .HasColumnType("int");

                    b.Property<string>("TipoDocumento")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Ubicacion")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("EstudianteDocumentosId");

                    b.ToTable("EstudianteDocumentos");

                    b.HasData(
                        new
                        {
                            EstudianteDocumentosId = new Guid("6a30c846-4b9d-4cf5-bb17-051a3e9d1b72"),
                            CandidatoEstudianteId = new Guid("c9d4c053-49b6-410c-bc78-2d54a999187f"),
                            Estado = true,
                            NombreDocumento = "Certificado de Nacimiento",
                            NumeroDocumento = 61464465,
                            Observaciones = "Ninguna",
                            Tamaño = 1024,
                            TipoDocumento = "Identificación",
                            Ubicacion = "ruta/al/documento1"
                        },
                        new
                        {
                            EstudianteDocumentosId = new Guid("2d54a999-187f-4a8c-99db-d17841e7938c"),
                            CandidatoEstudianteId = new Guid("3d490a70-94ce-4d15-9494-5248280c2ce3"),
                            Estado = true,
                            FechaActualizacion = new DateTime(2024, 2, 4, 16, 7, 21, 846, DateTimeKind.Local).AddTicks(6055),
                            NombreDocumento = "Diploma",
                            NumeroDocumento = 987654,
                            Observaciones = "Logros académicos",
                            Tamaño = 2048,
                            TipoDocumento = "Educativo",
                            Ubicacion = "ruta/al/documento2"
                        },
                        new
                        {
                            EstudianteDocumentosId = new Guid("3e68515e-3a47-4a62-a8c7-9f12242d020e"),
                            CandidatoEstudianteId = new Guid("4f3657e5-5824-47b8-b4cd-6f49a3f4dbf1"),
                            Estado = false,
                            FechaActualizacion = new DateTime(2024, 2, 4, 16, 7, 21, 846, DateTimeKind.Local).AddTicks(6072),
                            NombreDocumento = "Certificado de Graduación",
                            NumeroDocumento = 123456,
                            Observaciones = "Graduación universitaria",
                            Tamaño = 1536,
                            TipoDocumento = "Educativo",
                            Ubicacion = "ruta/al/documento3"
                        },
                        new
                        {
                            EstudianteDocumentosId = new Guid("4a303cce-8c0e-4ae7-89c1-067d0b7741b6"),
                            CandidatoEstudianteId = new Guid("3e68515e-3a47-4a62-a8c7-9f12242d020e"),
                            Estado = true,
                            FechaActualizacion = new DateTime(2024, 2, 4, 16, 7, 21, 846, DateTimeKind.Local).AddTicks(6075),
                            NombreDocumento = "Certificado de Matrícula",
                            NumeroDocumento = 789012,
                            Observaciones = "Matrícula escolar",
                            Tamaño = 8192,
                            TipoDocumento = "Educativo",
                            Ubicacion = "ruta/al/documento4"
                        },
                        new
                        {
                            EstudianteDocumentosId = new Guid("5f78d0e1-579e-4dfc-82a1-92010b4191d3"),
                            CandidatoEstudianteId = new Guid("31eb541a-9419-4eac-bf1b-0289a6c6f6f0"),
                            Estado = true,
                            FechaActualizacion = new DateTime(2024, 2, 4, 16, 7, 21, 846, DateTimeKind.Local).AddTicks(6079),
                            NombreDocumento = "Cédula de Identidad",
                            NumeroDocumento = 555555,
                            Observaciones = "Documento oficial",
                            Tamaño = 4096,
                            TipoDocumento = "Identificación",
                            Ubicacion = "ruta/al/documento5"
                        },
                        new
                        {
                            EstudianteDocumentosId = new Guid("f38f6b1a-86e9-4d9d-8a7a-62f17e6f1ba2"),
                            CandidatoEstudianteId = new Guid("7f255218-f8e0-45a9-9807-12e1bcfd438c"),
                            Estado = true,
                            FechaActualizacion = new DateTime(2024, 2, 4, 16, 7, 21, 846, DateTimeKind.Local).AddTicks(6082),
                            NombreDocumento = "Carné de Estudiante",
                            NumeroDocumento = 7890123,
                            Observaciones = "Carné escolar",
                            Tamaño = 3072,
                            TipoDocumento = "Identificación",
                            Ubicacion = "ruta/al/documento6"
                        },
                        new
                        {
                            EstudianteDocumentosId = new Guid("7e15d9a4-98cb-4d14-9a35-862f8c202725"),
                            CandidatoEstudianteId = new Guid("bb9b0679-4f04-4ac4-9ddc-5c3e50e81298"),
                            Estado = true,
                            FechaActualizacion = new DateTime(2024, 2, 4, 16, 7, 21, 846, DateTimeKind.Local).AddTicks(6085),
                            NombreDocumento = "Boleta de Calificaciones",
                            NumeroDocumento = 9876543,
                            Observaciones = "Registro académico",
                            Tamaño = 5120,
                            TipoDocumento = "Educativo",
                            Ubicacion = "ruta/al/documento7"
                        },
                        new
                        {
                            EstudianteDocumentosId = new Guid("8f4a67c2-fd5e-4316-8c50-7249f159d0f1"),
                            CandidatoEstudianteId = new Guid("a6509bea-688e-43b5-a870-6ee461ccf601"),
                            Estado = true,
                            FechaActualizacion = new DateTime(2024, 2, 4, 16, 7, 21, 846, DateTimeKind.Local).AddTicks(6087),
                            NombreDocumento = "Pasaporte",
                            NumeroDocumento = 1234567,
                            Observaciones = "Documento de viaje",
                            Tamaño = 4096,
                            TipoDocumento = "Identificación",
                            Ubicacion = "ruta/al/documento8"
                        },
                        new
                        {
                            EstudianteDocumentosId = new Guid("9b9d6d8f-72f0-4f0a-8e18-1e75b0182e3f"),
                            CandidatoEstudianteId = new Guid("db9fcac5-8654-45c3-87c7-8b5e13e9e6c2"),
                            Estado = true,
                            FechaActualizacion = new DateTime(2024, 2, 4, 16, 7, 21, 846, DateTimeKind.Local).AddTicks(6090),
                            NombreDocumento = "Certificado Médico",
                            NumeroDocumento = 543210,
                            Observaciones = "Informe médico",
                            Tamaño = 2048,
                            TipoDocumento = "Salud",
                            Ubicacion = "ruta/al/documento9"
                        },
                        new
                        {
                            EstudianteDocumentosId = new Guid("10a5e754-1570-4be0-8650-2c53d7cfb4d3"),
                            CandidatoEstudianteId = new Guid("b3b5a5a7-5b82-4f76-98c1-654589db8f61"),
                            Estado = true,
                            FechaActualizacion = new DateTime(2024, 2, 4, 16, 7, 21, 846, DateTimeKind.Local).AddTicks(6093),
                            NombreDocumento = "Fotografía del Estudiante",
                            NumeroDocumento = 1111111,
                            Observaciones = "Foto de perfil",
                            Tamaño = 1024,
                            TipoDocumento = "Identificación",
                            Ubicacion = "ruta/al/documento10"
                        });
                });

            modelBuilder.Entity("Entities.Models.D_Notas.Asistencia", b =>
                {
                    b.Property<int>("AsistenciaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AsistenciaId"));

                    b.Property<bool>("Asistio")
                        .HasColumnType("bit");

                    b.Property<DateTime>("FechaHoraAsistencia")
                        .HasColumnType("datetime2");

                    b.Property<string>("NombreAsistente")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Notas")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TipoEvento")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UbicacionEvento")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AsistenciaId");

                    b.ToTable("Asistencia");

                    b.HasData(
                        new
                        {
                            AsistenciaId = 1,
                            Asistio = true,
                            FechaHoraAsistencia = new DateTime(2023, 10, 3, 9, 0, 0, 0, DateTimeKind.Unspecified),
                            NombreAsistente = "Juan Pérez",
                            Notas = "Asistió puntualmente.",
                            TipoEvento = "Conferencia",
                            UbicacionEvento = "Salón A"
                        },
                        new
                        {
                            AsistenciaId = 2,
                            Asistio = false,
                            FechaHoraAsistencia = new DateTime(2023, 10, 4, 15, 30, 0, 0, DateTimeKind.Unspecified),
                            NombreAsistente = "María Rodríguez",
                            Notas = "No pudo asistir debido a un compromiso previo.",
                            TipoEvento = "Reunión",
                            UbicacionEvento = "Sala de juntas"
                        },
                        new
                        {
                            AsistenciaId = 3,
                            Asistio = true,
                            FechaHoraAsistencia = new DateTime(2023, 10, 5, 14, 0, 0, 0, DateTimeKind.Unspecified),
                            NombreAsistente = "Carlos González",
                            Notas = "Participó activamente en el taller.",
                            TipoEvento = "Taller",
                            UbicacionEvento = "Aula 101"
                        },
                        new
                        {
                            AsistenciaId = 4,
                            Asistio = true,
                            FechaHoraAsistencia = new DateTime(2023, 10, 6, 10, 30, 0, 0, DateTimeKind.Unspecified),
                            NombreAsistente = "Ana López",
                            Notas = "Tomó notas detalladas durante la conferencia.",
                            TipoEvento = "Conferencia",
                            UbicacionEvento = "Salón B"
                        },
                        new
                        {
                            AsistenciaId = 5,
                            Asistio = true,
                            FechaHoraAsistencia = new DateTime(2023, 10, 7, 18, 0, 0, 0, DateTimeKind.Unspecified),
                            NombreAsistente = "Pedro Ramírez",
                            Notas = "Participó en la discusión de temas importantes.",
                            TipoEvento = "Reunión",
                            UbicacionEvento = "Sala de conferencias"
                        },
                        new
                        {
                            AsistenciaId = 6,
                            Asistio = true,
                            FechaHoraAsistencia = new DateTime(2023, 10, 8, 11, 45, 0, 0, DateTimeKind.Unspecified),
                            NombreAsistente = "Laura Martínez",
                            Notas = "Hizo preguntas interesantes durante el seminario.",
                            TipoEvento = "Seminario",
                            UbicacionEvento = "Auditorio"
                        });
                });

            modelBuilder.Entity("Entities.Models.D_Notas.Estadisticas", b =>
                {
                    b.Property<int>("EstadisticaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EstadisticaId"));

                    b.Property<int>("AñoEscolar")
                        .HasColumnType("int");

                    b.Property<int>("CantidadExamenes")
                        .HasColumnType("int");

                    b.Property<DateTime>("FechaRegistro")
                        .HasColumnType("datetime2");

                    b.Property<string>("Materia")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("NotaMaxima")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("NotaMinima")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("NotaPromedio")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("PeriodoEscolar")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("EstadisticaId");

                    b.ToTable("Estadisticas");

                    b.HasData(
                        new
                        {
                            EstadisticaId = 1,
                            AñoEscolar = 2023,
                            CantidadExamenes = 5,
                            FechaRegistro = new DateTime(2024, 2, 4, 16, 7, 21, 846, DateTimeKind.Local).AddTicks(9086),
                            Materia = "Matemáticas",
                            NotaMaxima = 9.0m,
                            NotaMinima = 7.5m,
                            NotaPromedio = 8.5m,
                            PeriodoEscolar = "Primer Trimestre"
                        },
                        new
                        {
                            EstadisticaId = 2,
                            AñoEscolar = 2023,
                            CantidadExamenes = 4,
                            FechaRegistro = new DateTime(2024, 2, 4, 16, 7, 21, 846, DateTimeKind.Local).AddTicks(9091),
                            Materia = "Ciencias",
                            NotaMaxima = 8.5m,
                            NotaMinima = 6.5m,
                            NotaPromedio = 7.8m,
                            PeriodoEscolar = "Segundo Trimestre"
                        },
                        new
                        {
                            EstadisticaId = 3,
                            AñoEscolar = 2023,
                            CantidadExamenes = 3,
                            FechaRegistro = new DateTime(2024, 2, 4, 16, 7, 21, 846, DateTimeKind.Local).AddTicks(9095),
                            Materia = "Historia",
                            NotaMaxima = 9.5m,
                            NotaMinima = 8.5m,
                            NotaPromedio = 9.2m,
                            PeriodoEscolar = "Tercer Trimestre"
                        },
                        new
                        {
                            EstadisticaId = 4,
                            AñoEscolar = 2023,
                            CantidadExamenes = 5,
                            FechaRegistro = new DateTime(2024, 2, 4, 16, 7, 21, 846, DateTimeKind.Local).AddTicks(9097),
                            Materia = "Lenguaje",
                            NotaMaxima = 8.0m,
                            NotaMinima = 6.0m,
                            NotaPromedio = 7.2m,
                            PeriodoEscolar = "Primer Semestre"
                        },
                        new
                        {
                            EstadisticaId = 5,
                            AñoEscolar = 2023,
                            CantidadExamenes = 2,
                            FechaRegistro = new DateTime(2024, 2, 4, 16, 7, 21, 846, DateTimeKind.Local).AddTicks(9100),
                            Materia = "Arte",
                            NotaMaxima = 9.0m,
                            NotaMinima = 8.0m,
                            NotaPromedio = 8.7m,
                            PeriodoEscolar = "Segundo Semestre"
                        },
                        new
                        {
                            EstadisticaId = 6,
                            AñoEscolar = 2023,
                            CantidadExamenes = 3,
                            FechaRegistro = new DateTime(2024, 2, 4, 16, 7, 21, 846, DateTimeKind.Local).AddTicks(9103),
                            Materia = "Educación Física",
                            NotaMaxima = 10.0m,
                            NotaMinima = 9.0m,
                            NotaPromedio = 9.5m,
                            PeriodoEscolar = "Trimestre Extra"
                        });
                });

            modelBuilder.Entity("Entities.Models.Matricula", b =>
                {
                    b.Property<Guid>("MatriculaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CategoriaMatricula")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Comentarios")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EstadoMatricula")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("FechaMatricula")
                        .HasColumnType("datetime2");

                    b.Property<string>("InformacionPlanEstudios")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PeriodoAcademico")
                        .HasColumnType("int");

                    b.Property<string>("RegistroCambios")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TipoMatricula")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("MatriculaId");

                    b.ToTable("Matricula");

                    b.HasData(
                        new
                        {
                            MatriculaId = new Guid("460056d5-f474-468a-bac6-f4a1a5d8f44a"),
                            CategoriaMatricula = "Estudiante de Tiempo Completo",
                            Comentarios = "Comentario sobre la matrícula 1",
                            EstadoMatricula = "Activa",
                            FechaMatricula = new DateTime(2024, 2, 4, 16, 7, 21, 846, DateTimeKind.Local).AddTicks(7653),
                            InformacionPlanEstudios = "Plan de estudios 2023",
                            PeriodoAcademico = 2024,
                            RegistroCambios = "Registro de cambios 1",
                            TipoMatricula = "Matrícula Regular"
                        },
                        new
                        {
                            MatriculaId = new Guid("ba71f5a3-bd81-4b4f-aff6-d656d523f86a"),
                            CategoriaMatricula = "Estudiante de Tiempo Parcial",
                            Comentarios = "Comentario sobre la matrícula 2",
                            EstadoMatricula = "Pendiente",
                            FechaMatricula = new DateTime(2024, 3, 4, 16, 7, 21, 846, DateTimeKind.Local).AddTicks(7657),
                            InformacionPlanEstudios = "Plan de estudios 2023",
                            PeriodoAcademico = 2024,
                            RegistroCambios = "Registro de cambios 2",
                            TipoMatricula = "Matrícula Parcial"
                        },
                        new
                        {
                            MatriculaId = new Guid("de0f2394-a4a0-49ea-8888-37b2653eb650"),
                            CategoriaMatricula = "Estudiante Internacional",
                            Comentarios = "Comentario sobre la matrícula 3",
                            EstadoMatricula = "Cancelada",
                            FechaMatricula = new DateTime(2024, 4, 4, 16, 7, 21, 846, DateTimeKind.Local).AddTicks(7661),
                            InformacionPlanEstudios = "Plan de estudios 2023",
                            PeriodoAcademico = 2024,
                            RegistroCambios = "Registro de cambios 3",
                            TipoMatricula = "Matrícula Regular"
                        },
                        new
                        {
                            MatriculaId = new Guid("dcbd5037-9e2a-49c9-a309-e9f4a622a967"),
                            CategoriaMatricula = "Estudiante de Tiempo Completo",
                            Comentarios = "Comentario sobre la matrícula 4",
                            EstadoMatricula = "Activa",
                            FechaMatricula = new DateTime(2024, 5, 4, 16, 7, 21, 846, DateTimeKind.Local).AddTicks(7663),
                            InformacionPlanEstudios = "Plan de estudios 2023",
                            PeriodoAcademico = 2024,
                            RegistroCambios = "Registro de cambios 4",
                            TipoMatricula = "Matrícula Regular"
                        },
                        new
                        {
                            MatriculaId = new Guid("1212d56d-5f4a-4b8a-8bac-e8af50c76d7e"),
                            CategoriaMatricula = "Estudiante de Tiempo Completo",
                            Comentarios = "Comentario sobre la matrícula 5",
                            EstadoMatricula = "Activa",
                            FechaMatricula = new DateTime(2024, 6, 4, 16, 7, 21, 846, DateTimeKind.Local).AddTicks(7668),
                            InformacionPlanEstudios = "Plan de estudios 2023",
                            PeriodoAcademico = 2024,
                            RegistroCambios = "Registro de cambios 5",
                            TipoMatricula = "Matrícula Regular"
                        });
                });

            modelBuilder.Entity("Entities.Models.PreMatricula", b =>
                {
                    b.Property<Guid>("PreMatriculaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("EstadoPreMatricula")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GradoONivel")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Observaciones")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RequisitosDocumentacion")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Turno")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PreMatriculaId");

                    b.ToTable("PreMatricula");

                    b.HasData(
                        new
                        {
                            PreMatriculaId = new Guid("2345c21b-69d3-4fca-87a5-04e90c84cbc8"),
                            EstadoPreMatricula = "Pendiente",
                            GradoONivel = "Quinto de Primaria",
                            Observaciones = "Estudiante con requerimientos especiales.",
                            RequisitosDocumentacion = "NoCumplio",
                            Turno = "Mañana"
                        },
                        new
                        {
                            PreMatriculaId = new Guid("3eec71e2-cc13-4b58-8fd9-8dd48c1b955f"),
                            EstadoPreMatricula = "Activa",
                            GradoONivel = "Séptimo de Secundaria",
                            Observaciones = "Estudiante de transferencia.",
                            RequisitosDocumentacion = "SiCumplio",
                            Turno = "Tarde"
                        },
                        new
                        {
                            PreMatriculaId = new Guid("4b94fb18-48e1-4312-9e8f-e5c60d4aa52a"),
                            EstadoPreMatricula = "Pendiente",
                            GradoONivel = "Tercero de Primaria",
                            Observaciones = "Estudiante extranjero.",
                            RequisitosDocumentacion = "SiCumplio",
                            Turno = "Mañana"
                        },
                        new
                        {
                            PreMatriculaId = new Guid("1e203d42-9b7d-4bbe-84fa-0168ab06abe5"),
                            EstadoPreMatricula = "Activa",
                            GradoONivel = "Cuarto de Secundaria",
                            Observaciones = "Estudiante con beca deportiva.",
                            RequisitosDocumentacion = "SiCumplio",
                            Turno = "Tarde"
                        },
                        new
                        {
                            PreMatriculaId = new Guid("f70f2817-6c4c-4317-98ea-2ed90762b36d"),
                            EstadoPreMatricula = "Activa",
                            GradoONivel = "Segundo de Primaria",
                            Observaciones = "Estudiante con discapacidad visual.",
                            RequisitosDocumentacion = "SiCumplio",
                            Turno = "Mañana"
                        },
                        new
                        {
                            PreMatriculaId = new Guid("dfee6f54-9d82-4ae1-a7d5-a800b10e0402"),
                            EstadoPreMatricula = "Pendiente",
                            GradoONivel = "Octavo de Secundaria",
                            Observaciones = "Estudiante sin observaciones adicionales.",
                            RequisitosDocumentacion = "Si cumplio",
                            Turno = "Tarde"
                        });
                });

            modelBuilder.Entity("Entities.Models.RespuestaCupo", b =>
                {
                    b.Property<Guid>("RespuestaCupoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<TimeSpan>("DuracionRespuesta")
                        .HasColumnType("time");

                    b.Property<string>("EstadoRespuesta")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("FechaRespuesta")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("FechaVencimiento")
                        .HasColumnType("datetime2");

                    b.Property<string>("MensajeRespuesta")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Prioridad")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TipoRespuesta")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UsuarioRespuesta")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("RespuestaCupoId");

                    b.ToTable("RespuestaCupo");

                    b.HasData(
                        new
                        {
                            RespuestaCupoId = new Guid("10b90ed5-8bb8-4f2e-bd15-4857fd932dcd"),
                            DuracionRespuesta = new TimeSpan(30, 0, 0, 0, 0),
                            EstadoRespuesta = "Aceptada",
                            FechaRespuesta = new DateTime(2024, 2, 5, 16, 7, 21, 846, DateTimeKind.Local).AddTicks(7198),
                            FechaVencimiento = new DateTime(2024, 3, 4, 16, 7, 21, 846, DateTimeKind.Local).AddTicks(7204),
                            MensajeRespuesta = "Respuesta 1",
                            Prioridad = "Alta",
                            TipoRespuesta = "Aceptación",
                            UsuarioRespuesta = "Usuario1"
                        },
                        new
                        {
                            RespuestaCupoId = new Guid("49f896d0-04f3-436f-91c1-826fbbeb55da"),
                            DuracionRespuesta = new TimeSpan(45, 0, 0, 0, 0),
                            EstadoRespuesta = "Rechazada",
                            FechaRespuesta = new DateTime(2024, 2, 6, 16, 7, 21, 846, DateTimeKind.Local).AddTicks(7210),
                            FechaVencimiento = new DateTime(2024, 4, 4, 16, 7, 21, 846, DateTimeKind.Local).AddTicks(7211),
                            MensajeRespuesta = "Respuesta 2",
                            Prioridad = "Media",
                            TipoRespuesta = "Rechazo",
                            UsuarioRespuesta = "Usuario2"
                        },
                        new
                        {
                            RespuestaCupoId = new Guid("d18b00d0-dd4a-4ebf-8339-a8a2470e2742"),
                            DuracionRespuesta = new TimeSpan(60, 0, 0, 0, 0),
                            EstadoRespuesta = "Pendiente",
                            FechaRespuesta = new DateTime(2024, 2, 7, 16, 7, 21, 846, DateTimeKind.Local).AddTicks(7213),
                            FechaVencimiento = new DateTime(2024, 5, 4, 16, 7, 21, 846, DateTimeKind.Local).AddTicks(7214),
                            MensajeRespuesta = "Respuesta 3",
                            Prioridad = "Baja",
                            TipoRespuesta = "Pendiente",
                            UsuarioRespuesta = "Usuario3"
                        },
                        new
                        {
                            RespuestaCupoId = new Guid("a9522efb-ae0e-4ee3-b221-7a70cd298df0"),
                            DuracionRespuesta = new TimeSpan(30, 0, 0, 0, 0),
                            EstadoRespuesta = "Aceptada",
                            FechaRespuesta = new DateTime(2024, 2, 8, 16, 7, 21, 846, DateTimeKind.Local).AddTicks(7218),
                            FechaVencimiento = new DateTime(2024, 6, 4, 16, 7, 21, 846, DateTimeKind.Local).AddTicks(7219),
                            MensajeRespuesta = "Respuesta 4",
                            Prioridad = "Alta",
                            TipoRespuesta = "Aceptación",
                            UsuarioRespuesta = "Usuario4"
                        },
                        new
                        {
                            RespuestaCupoId = new Guid("0a5d3972-b0e0-49ec-aef8-19f0d80d938f"),
                            DuracionRespuesta = new TimeSpan(45, 0, 0, 0, 0),
                            EstadoRespuesta = "Rechazada",
                            FechaRespuesta = new DateTime(2024, 2, 9, 16, 7, 21, 846, DateTimeKind.Local).AddTicks(7221),
                            FechaVencimiento = new DateTime(2024, 7, 4, 16, 7, 21, 846, DateTimeKind.Local).AddTicks(7221),
                            MensajeRespuesta = "Respuesta 5",
                            Prioridad = "Media",
                            TipoRespuesta = "Rechazo",
                            UsuarioRespuesta = "Usuario5"
                        },
                        new
                        {
                            RespuestaCupoId = new Guid("7dfc3fab-584f-4060-be48-1ed5d03c0972"),
                            DuracionRespuesta = new TimeSpan(30, 0, 0, 0, 0),
                            EstadoRespuesta = "Aceptada",
                            FechaRespuesta = new DateTime(2024, 2, 10, 16, 7, 21, 846, DateTimeKind.Local).AddTicks(7223),
                            FechaVencimiento = new DateTime(2024, 8, 4, 16, 7, 21, 846, DateTimeKind.Local).AddTicks(7224),
                            MensajeRespuesta = "Respuesta 6",
                            Prioridad = "Alta",
                            TipoRespuesta = "Aceptación",
                            UsuarioRespuesta = "Usuario6"
                        },
                        new
                        {
                            RespuestaCupoId = new Guid("5944f4a6-bf5a-4c7e-83c6-9d77f5664bb8"),
                            DuracionRespuesta = new TimeSpan(45, 0, 0, 0, 0),
                            EstadoRespuesta = "Rechazada",
                            FechaRespuesta = new DateTime(2024, 2, 11, 16, 7, 21, 846, DateTimeKind.Local).AddTicks(7226),
                            FechaVencimiento = new DateTime(2024, 9, 4, 16, 7, 21, 846, DateTimeKind.Local).AddTicks(7227),
                            MensajeRespuesta = "Respuesta 7",
                            Prioridad = "Media",
                            TipoRespuesta = "Rechazo",
                            UsuarioRespuesta = "Usuario7"
                        },
                        new
                        {
                            RespuestaCupoId = new Guid("789a22df-5294-47cf-af46-53d9fde9fa86"),
                            DuracionRespuesta = new TimeSpan(60, 0, 0, 0, 0),
                            EstadoRespuesta = "Pendiente",
                            FechaRespuesta = new DateTime(2024, 2, 12, 16, 7, 21, 846, DateTimeKind.Local).AddTicks(7229),
                            FechaVencimiento = new DateTime(2024, 10, 4, 16, 7, 21, 846, DateTimeKind.Local).AddTicks(7229),
                            MensajeRespuesta = "Respuesta 8",
                            Prioridad = "Baja",
                            TipoRespuesta = "Pendiente",
                            UsuarioRespuesta = "Usuario8"
                        },
                        new
                        {
                            RespuestaCupoId = new Guid("68fcaba0-7c27-4372-a111-fc26349c5b3d"),
                            DuracionRespuesta = new TimeSpan(30, 0, 0, 0, 0),
                            EstadoRespuesta = "Aceptada",
                            FechaRespuesta = new DateTime(2024, 2, 13, 16, 7, 21, 846, DateTimeKind.Local).AddTicks(7231),
                            FechaVencimiento = new DateTime(2024, 11, 4, 16, 7, 21, 846, DateTimeKind.Local).AddTicks(7232),
                            MensajeRespuesta = "Respuesta 9",
                            Prioridad = "Alta",
                            TipoRespuesta = "Aceptación",
                            UsuarioRespuesta = "Usuario9"
                        });
                });
#pragma warning restore 612, 618
        }
    }
}
