// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Repository;

#nullable disable

namespace SRUNPE.Migrations
{
    [DbContext(typeof(RepositoryContext))]
    [Migration("20240130143408_prueba01")]
    partial class prueba01
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Entities.Models.D_Acudiente.Acudiente", b =>
                {
                    b.Property<Guid>("AcudienteId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Apellidos")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CorreoElectronico")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Estado")
                        .HasColumnType("bit");

                    b.Property<string>("EstadoCivil")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("FechaNacimiento")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("FechaRegistro")
                        .HasColumnType("datetime2");

                    b.Property<string>("Genero")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nombres")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("NumeroIdentificacion")
                        .HasColumnType("int");

                    b.Property<string>("Ocupacion")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RelacionConEstudiante")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AcudienteId");

                    b.ToTable("Acudiente");

                    b.HasData(
                        new
                        {
                            AcudienteId = new Guid("e2582b22-37c0-47e3-87c5-8dd9d25c7dc6"),
                            Apellidos = "Pérez",
                            CorreoElectronico = "maria.perez@email.com",
                            Estado = true,
                            EstadoCivil = "Casada",
                            FechaNacimiento = new DateTime(1980, 5, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FechaRegistro = new DateTime(2024, 1, 30, 9, 34, 8, 91, DateTimeKind.Local).AddTicks(5986),
                            Genero = "Femenino",
                            Nombres = "María",
                            NumeroIdentificacion = 12345,
                            Ocupacion = "Ingeniera",
                            RelacionConEstudiante = "Madre"
                        },
                        new
                        {
                            AcudienteId = new Guid("9f60be2a-b88b-4d54-b14f-97cebdcb17cd"),
                            Apellidos = "González",
                            CorreoElectronico = "juan.gonzalez@email.com",
                            Estado = true,
                            EstadoCivil = "Soltero",
                            FechaNacimiento = new DateTime(1975, 8, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FechaRegistro = new DateTime(2024, 1, 30, 9, 34, 8, 91, DateTimeKind.Local).AddTicks(5992),
                            Genero = "Masculino",
                            Nombres = "Juan",
                            NumeroIdentificacion = 67890,
                            Ocupacion = "Abogado",
                            RelacionConEstudiante = "Padre"
                        },
                        new
                        {
                            AcudienteId = new Guid("4b8f80d8-0645-4482-886a-dc966cf5e519"),
                            Apellidos = "López",
                            CorreoElectronico = "ana.lopez@email.com",
                            Estado = true,
                            EstadoCivil = "Divorciada",
                            FechaNacimiento = new DateTime(1990, 3, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FechaRegistro = new DateTime(2024, 1, 30, 9, 34, 8, 91, DateTimeKind.Local).AddTicks(5996),
                            Genero = "Femenino",
                            Nombres = "Ana",
                            NumeroIdentificacion = 54321,
                            Ocupacion = "Médica",
                            RelacionConEstudiante = "Tutor Legal"
                        },
                        new
                        {
                            AcudienteId = new Guid("74fa1817-7181-4cd4-940d-3041993a9f4a"),
                            Apellidos = "Martínez",
                            CorreoElectronico = "pedro.martinez@email.com",
                            Estado = true,
                            EstadoCivil = "Casado",
                            FechaNacimiento = new DateTime(1988, 7, 8, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FechaRegistro = new DateTime(2024, 1, 30, 9, 34, 8, 91, DateTimeKind.Local).AddTicks(6000),
                            Genero = "Masculino",
                            Nombres = "Pedro",
                            NumeroIdentificacion = 98765,
                            Ocupacion = "Profesor",
                            RelacionConEstudiante = "Padre"
                        },
                        new
                        {
                            AcudienteId = new Guid("56a9c7b4-e512-43eb-a811-f71d14f6c8e6"),
                            Apellidos = "Sánchez",
                            CorreoElectronico = "luis.sanchez@email.com",
                            Estado = true,
                            EstadoCivil = "Casado",
                            FechaNacimiento = new DateTime(1972, 12, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FechaRegistro = new DateTime(2024, 1, 30, 9, 34, 8, 91, DateTimeKind.Local).AddTicks(6009),
                            Genero = "Masculino",
                            Nombres = "Luis",
                            NumeroIdentificacion = 13579,
                            Ocupacion = "Contador",
                            RelacionConEstudiante = "Padre"
                        },
                        new
                        {
                            AcudienteId = new Guid("bb96f26d-e98b-4f2e-9dd3-63e9720c91f0"),
                            Apellidos = "Rodríguez",
                            CorreoElectronico = "carlos.rodriguez@email.com",
                            Estado = true,
                            EstadoCivil = "Soltero",
                            FechaNacimiento = new DateTime(1985, 9, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FechaRegistro = new DateTime(2024, 1, 30, 9, 34, 8, 91, DateTimeKind.Local).AddTicks(6013),
                            Genero = "Masculino",
                            Nombres = "Carlos",
                            NumeroIdentificacion = 24680,
                            Ocupacion = "Ingeniero Civil",
                            RelacionConEstudiante = "Tío"
                        },
                        new
                        {
                            AcudienteId = new Guid("ff959ea3-0a28-4bb1-a211-96f6672f9ade"),
                            Apellidos = "Gómez",
                            CorreoElectronico = "laura.gomez@email.com",
                            Estado = true,
                            EstadoCivil = "Divorciada",
                            FechaNacimiento = new DateTime(1992, 6, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FechaRegistro = new DateTime(2024, 1, 30, 9, 34, 8, 91, DateTimeKind.Local).AddTicks(6017),
                            Genero = "Femenino",
                            Nombres = "Laura",
                            NumeroIdentificacion = 86420,
                            Ocupacion = "Médica",
                            RelacionConEstudiante = "Madre"
                        },
                        new
                        {
                            AcudienteId = new Guid("9432f2e3-23e6-45cd-9432-5d634647838f"),
                            Apellidos = "Hernández",
                            CorreoElectronico = "andres.hernandez@email.com",
                            Estado = true,
                            EstadoCivil = "Casado",
                            FechaNacimiento = new DateTime(1979, 11, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FechaRegistro = new DateTime(2024, 1, 30, 9, 34, 8, 91, DateTimeKind.Local).AddTicks(6021),
                            Genero = "Masculino",
                            Nombres = "Andrés",
                            NumeroIdentificacion = 97531,
                            Ocupacion = "Arquitecto",
                            RelacionConEstudiante = "Padrino"
                        },
                        new
                        {
                            AcudienteId = new Guid("bde66664-41f6-4a16-998e-e5d6f52d37d9"),
                            Apellidos = "Díaz",
                            CorreoElectronico = "sofia.diaz@email.com",
                            Estado = true,
                            EstadoCivil = "Soltera",
                            FechaNacimiento = new DateTime(1987, 4, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FechaRegistro = new DateTime(2024, 1, 30, 9, 34, 8, 91, DateTimeKind.Local).AddTicks(6025),
                            Genero = "Femenino",
                            Nombres = "Sofía",
                            NumeroIdentificacion = 75319,
                            Ocupacion = "Profesora",
                            RelacionConEstudiante = "Tía"
                        },
                        new
                        {
                            AcudienteId = new Guid("54ff4357-8d8a-411d-ab58-42d435476b46"),
                            Apellidos = "Luna",
                            CorreoElectronico = "roberto.luna@email.com",
                            Estado = true,
                            EstadoCivil = "Viudo",
                            FechaNacimiento = new DateTime(1970, 1, 8, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FechaRegistro = new DateTime(2024, 1, 30, 9, 34, 8, 91, DateTimeKind.Local).AddTicks(6028),
                            Genero = "Masculino",
                            Nombres = "Roberto",
                            NumeroIdentificacion = 10293,
                            Ocupacion = "Jubilado",
                            RelacionConEstudiante = "Abuelo"
                        });
                });

            modelBuilder.Entity("Entities.Models.D_Acudiente.DireccionAcudiente", b =>
                {
                    b.Property<Guid>("DireccionAcudienteId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Calle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CiudadLocalidad")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CodigoPostal")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ColoniaBarrio")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EstadoProvincia")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Pais")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("DireccionAcudienteId");

                    b.ToTable("DireccionAcudiente");

                    b.HasData(
                        new
                        {
                            DireccionAcudienteId = new Guid("c8413278-7eee-43c6-80d5-d08459f0d999"),
                            Calle = "Calle 72",
                            CiudadLocalidad = "Bogotá",
                            CodigoPostal = "110231",
                            ColoniaBarrio = "Chapinero",
                            EstadoProvincia = "Bogotá D.C.",
                            Pais = "Colombia"
                        },
                        new
                        {
                            DireccionAcudienteId = new Guid("ca17cb2e-cbf9-40d3-8f2d-712973667c76"),
                            Calle = "Calle 72",
                            CiudadLocalidad = "Bogotá",
                            CodigoPostal = "110231",
                            ColoniaBarrio = "Chapinero",
                            EstadoProvincia = "Bogotá D.C.",
                            Pais = "Colombia"
                        },
                        new
                        {
                            DireccionAcudienteId = new Guid("5cc80e17-3f17-4d41-ae6f-873652fdbd15"),
                            Calle = "Carrera 10",
                            CiudadLocalidad = "Bogotá",
                            CodigoPostal = "110321",
                            ColoniaBarrio = "La Candelaria",
                            EstadoProvincia = "Bogotá D.C.",
                            Pais = "Colombia"
                        },
                        new
                        {
                            DireccionAcudienteId = new Guid("592a9608-d1e5-49e7-a388-2df1bb036b15"),
                            Calle = "Avenida Boyacá",
                            CiudadLocalidad = "Bogotá",
                            CodigoPostal = "110511",
                            ColoniaBarrio = "Fontibón",
                            EstadoProvincia = "Bogotá D.C.",
                            Pais = "Colombia"
                        },
                        new
                        {
                            DireccionAcudienteId = new Guid("32825096-9b47-482c-a080-f02d5666b4e1"),
                            Calle = "Calle 80",
                            CiudadLocalidad = "Bogotá",
                            CodigoPostal = "110841",
                            ColoniaBarrio = "Engativá",
                            EstadoProvincia = "Bogotá D.C.",
                            Pais = "Colombia"
                        },
                        new
                        {
                            DireccionAcudienteId = new Guid("42493fc5-9815-4fe3-a9f9-f96bbb8d4aed"),
                            Calle = "Carrera 7",
                            CiudadLocalidad = "Bogotá",
                            CodigoPostal = "110171",
                            ColoniaBarrio = "Usaquén",
                            EstadoProvincia = "Bogotá D.C.",
                            Pais = "Colombia"
                        },
                        new
                        {
                            DireccionAcudienteId = new Guid("17e0d49b-22a7-4839-9533-e658634afbe9"),
                            Calle = "Avenida 68",
                            CiudadLocalidad = "Bogotá",
                            CodigoPostal = "110841",
                            ColoniaBarrio = "Kennedy",
                            EstadoProvincia = "Bogotá D.C.",
                            Pais = "Colombia"
                        });
                });

            modelBuilder.Entity("Entities.Models.D_Acudiente.TelefonoAcudiente", b =>
                {
                    b.Property<Guid>("TelefonoAcudienteId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("AcudienteId")
                        .HasColumnType("int");

                    b.Property<string>("Indicativo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Numero")
                        .HasColumnType("int");

                    b.Property<string>("Tipo")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TelefonoAcudienteId");

                    b.ToTable("TelefonoAcudiente");

                    b.HasData(
                        new
                        {
                            TelefonoAcudienteId = new Guid("81afc35b-48cc-4545-a9d3-096684f4df7a"),
                            AcudienteId = 1,
                            Indicativo = "+1",
                            Numero = -4135,
                            Tipo = "Móvil"
                        },
                        new
                        {
                            TelefonoAcudienteId = new Guid("999be28d-0d74-49e4-ae35-3b16e39b3907"),
                            AcudienteId = 2,
                            Indicativo = "+1",
                            Numero = -6975,
                            Tipo = "Móvil"
                        },
                        new
                        {
                            TelefonoAcudienteId = new Guid("c7445617-62ac-4629-bda4-e1149e232f7d"),
                            AcudienteId = 3,
                            Indicativo = "+1",
                            Numero = -5357,
                            Tipo = "Fijo"
                        },
                        new
                        {
                            TelefonoAcudienteId = new Guid("80cea964-edbd-482d-9b26-fcf9df86873f"),
                            AcudienteId = 4,
                            Indicativo = "+1",
                            Numero = -5753,
                            Tipo = "Móvil"
                        },
                        new
                        {
                            TelefonoAcudienteId = new Guid("9aa54acd-deb5-4b34-8e0b-1c9ab2915784"),
                            AcudienteId = 5,
                            Indicativo = "+1",
                            Numero = 911,
                            Tipo = "Emergencia"
                        },
                        new
                        {
                            TelefonoAcudienteId = new Guid("cc037f26-aeff-4d6d-80e5-c46188cd38f8"),
                            AcudienteId = 1,
                            Indicativo = "+1",
                            Numero = -667,
                            Tipo = "Móvil"
                        },
                        new
                        {
                            TelefonoAcudienteId = new Guid("178c9816-b86a-46b3-a7da-60473146ef06"),
                            AcudienteId = 2,
                            Indicativo = "+1",
                            Numero = -1889,
                            Tipo = "Móvil"
                        },
                        new
                        {
                            TelefonoAcudienteId = new Guid("8a2c43f6-6b64-42e2-9c71-3ece19bf905d"),
                            AcudienteId = 3,
                            Indicativo = "+1",
                            Numero = -3111,
                            Tipo = "Fijo"
                        },
                        new
                        {
                            TelefonoAcudienteId = new Guid("2557cf66-e9af-4afb-bc08-06685d3971d0"),
                            AcudienteId = 4,
                            Indicativo = "+1",
                            Numero = -4333,
                            Tipo = "Móvil"
                        },
                        new
                        {
                            TelefonoAcudienteId = new Guid("b511bd7d-a1b1-4c9f-939d-21586f433b9e"),
                            AcudienteId = 5,
                            Indicativo = "+1",
                            Numero = -5555,
                            Tipo = "Emergencia"
                        });
                });

            modelBuilder.Entity("Entities.Models.D_DepartamentoAcademico.Aulas", b =>
                {
                    b.Property<Guid>("AulaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Capacidad")
                        .HasColumnType("int");

                    b.Property<string>("EstadoAula")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HorarioDisponibilidad")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NombreNumero")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NotasAdicionales")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RegistrosIncidentesProblemas")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ResponsableAula")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TipoAula")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Ubicacion")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UltimaActualizacion")
                        .HasColumnType("datetime2");

                    b.HasKey("AulaId");

                    b.ToTable("Aulas");

                    b.HasData(
                        new
                        {
                            AulaId = new Guid("eb277d02-270e-4780-8733-1d90e570528f"),
                            Capacidad = 50,
                            EstadoAula = "Disponible",
                            HorarioDisponibilidad = "Lunes a Viernes, 08:00 AM - 06:00 PM",
                            NombreNumero = "Aula 101",
                            NotasAdicionales = "Equipada con proyector",
                            RegistrosIncidentesProblemas = "Ninguno",
                            ResponsableAula = "Profesor Responsable 1",
                            TipoAula = "Salón de Clases",
                            Ubicacion = "Edificio Principal",
                            UltimaActualizacion = new DateTime(2023, 9, 15, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            AulaId = new Guid("c76bf257-0b0f-4d60-91bb-195a5504b8a3"),
                            Capacidad = 30,
                            EstadoAula = "Ocupado",
                            HorarioDisponibilidad = "Lunes a Viernes, 10:00 AM - 05:00 PM",
                            NombreNumero = "Aula 102",
                            NotasAdicionales = "Equipado con computadoras de última generación",
                            RegistrosIncidentesProblemas = "Reporte de fallo en una computadora",
                            ResponsableAula = "Profesor Responsable 2",
                            TipoAula = "Laboratorio de Informática",
                            Ubicacion = "Edificio de Ciencias",
                            UltimaActualizacion = new DateTime(2023, 9, 10, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            AulaId = new Guid("9b8f1f96-61f3-4d25-b979-ff27c2facfca"),
                            Capacidad = 100,
                            EstadoAula = "Disponible",
                            HorarioDisponibilidad = "Disponible previa reserva",
                            NombreNumero = "Aula 103",
                            NotasAdicionales = "Equipada con proyector y sistema de sonido",
                            RegistrosIncidentesProblemas = "Ninguno",
                            ResponsableAula = "Personal de Eventos",
                            TipoAula = "Sala de Conferencias",
                            Ubicacion = "Edificio de Eventos",
                            UltimaActualizacion = new DateTime(2023, 9, 20, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            AulaId = new Guid("b938ca56-e983-4ac7-bf37-6b5a770441fe"),
                            Capacidad = 40,
                            EstadoAula = "En Mantenimiento",
                            HorarioDisponibilidad = "No disponible temporalmente",
                            NombreNumero = "Aula 104",
                            NotasAdicionales = "Mantenimiento programado",
                            RegistrosIncidentesProblemas = "Reporte de fugas de agua en el techo",
                            ResponsableAula = "Personal de Mantenimiento",
                            TipoAula = "Salón de Clases",
                            Ubicacion = "Edificio Principal",
                            UltimaActualizacion = new DateTime(2023, 9, 25, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            AulaId = new Guid("93b0fa00-55b5-4739-9970-599b7a224d38"),
                            Capacidad = 10,
                            EstadoAula = "Disponible",
                            HorarioDisponibilidad = "Lunes a Domingo, 09:00 AM - 11:00 PM",
                            NombreNumero = "Aula 105",
                            NotasAdicionales = "Área de estudio tranquila",
                            RegistrosIncidentesProblemas = "Ninguno",
                            ResponsableAula = "Bibliotecario",
                            TipoAula = "Sala de Estudio",
                            Ubicacion = "Biblioteca",
                            UltimaActualizacion = new DateTime(2023, 9, 18, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("Entities.Models.D_DepartamentoAcademico.Cursos", b =>
                {
                    b.Property<Guid>("CursoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AulasAsignadas")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Codigo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Curso")
                        .HasColumnType("int");

                    b.Property<string>("DepartamentoAcademico")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("FechaLimiteInscripcion")
                        .HasColumnType("datetime2");

                    b.Property<string>("MetodosEnsenanza")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nivel")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProfesorAsignado")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CursoId");

                    b.ToTable("Cursos");

                    b.HasData(
                        new
                        {
                            CursoId = new Guid("8e5df352-bc5c-4488-b284-d7d9f153e382"),
                            AulasAsignadas = "Aula 101, Aula 102",
                            Codigo = "CS101",
                            Curso = 101,
                            DepartamentoAcademico = "Ciencias de la Computación",
                            Descripcion = "Introducción a la Programación",
                            FechaLimiteInscripcion = new DateTime(2023, 9, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            MetodosEnsenanza = "Clases magistrales, laboratorios prácticos",
                            Nivel = "Primer Semestre",
                            ProfesorAsignado = "Profesor 1"
                        },
                        new
                        {
                            CursoId = new Guid("ebe9d013-05aa-4313-80ea-05df716bec7f"),
                            AulasAsignadas = "Classroom 201, Classroom 202",
                            Codigo = "ENG201",
                            Curso = 201,
                            DepartamentoAcademico = "English Department",
                            Descripcion = "Advanced English Composition",
                            FechaLimiteInscripcion = new DateTime(2023, 10, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            MetodosEnsenanza = "Lectures, writing assignments, group discussions",
                            Nivel = "Second Semester",
                            ProfesorAsignado = "Professor 2"
                        },
                        new
                        {
                            CursoId = new Guid("59d2e468-b2e8-4f29-a60c-6b28eee1e7c3"),
                            AulasAsignadas = "Math Classroom 301",
                            Codigo = "MATH301",
                            Curso = 301,
                            DepartamentoAcademico = "Mathematics Department",
                            Descripcion = "Advanced Calculus",
                            FechaLimiteInscripcion = new DateTime(2023, 9, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            MetodosEnsenanza = "Lectures, problem sets, exams",
                            Nivel = "Third Semester",
                            ProfesorAsignado = "Professor 3"
                        },
                        new
                        {
                            CursoId = new Guid("2aaf4cb4-ea06-408b-a359-c5d54c403437"),
                            AulasAsignadas = "Chemistry Lab 201",
                            Codigo = "CHEM401",
                            Curso = 401,
                            DepartamentoAcademico = "Chemistry Department",
                            Descripcion = "Organic Chemistry",
                            FechaLimiteInscripcion = new DateTime(2023, 10, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            MetodosEnsenanza = "Lectures, laboratory experiments",
                            Nivel = "Second Semester",
                            ProfesorAsignado = "Professor 4"
                        },
                        new
                        {
                            CursoId = new Guid("e79e732f-2c9b-4043-b62d-e82adc62b58f"),
                            AulasAsignadas = "History Classroom 101",
                            Codigo = "HIST501",
                            Curso = 501,
                            DepartamentoAcademico = "History Department",
                            Descripcion = "Introduction to History",
                            FechaLimiteInscripcion = new DateTime(2023, 9, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            MetodosEnsenanza = "Lectures, discussions, research papers",
                            Nivel = "First Semester",
                            ProfesorAsignado = "Professor 5"
                        });
                });

            modelBuilder.Entity("Entities.Models.D_DepartamentoAcademico.Horarios", b =>
                {
                    b.Property<Guid>("HorarioId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("DiaSemana")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DuracionClaseMinutos")
                        .HasColumnType("int");

                    b.Property<string>("EstadoHorario")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("FechaFinClases")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("FechaInicioClases")
                        .HasColumnType("datetime2");

                    b.Property<string>("GrupoSeccion")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<TimeSpan>("HoraFin")
                        .HasColumnType("time");

                    b.Property<TimeSpan>("HoraInicio")
                        .HasColumnType("time");

                    b.Property<string>("NotificacionCambioHorario")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PeriodoAcademico")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProfesorAsistente")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SalaAula")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("HorarioId");

                    b.ToTable("Horarios");

                    b.HasData(
                        new
                        {
                            HorarioId = new Guid("3e2fa338-b3e8-4683-96d5-5470da889b85"),
                            DiaSemana = "Lunes",
                            DuracionClaseMinutos = 120,
                            EstadoHorario = "Activo",
                            FechaFinClases = new DateTime(2023, 12, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FechaInicioClases = new DateTime(2023, 9, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            GrupoSeccion = "Grupo A",
                            HoraFin = new TimeSpan(0, 11, 0, 0, 0),
                            HoraInicio = new TimeSpan(0, 9, 0, 0, 0),
                            NotificacionCambioHorario = "No",
                            PeriodoAcademico = "Semestre de Otoño",
                            ProfesorAsistente = "Profesor Asistente 1",
                            SalaAula = "Aula 101"
                        },
                        new
                        {
                            HorarioId = new Guid("45d4cc9b-b617-4b9b-98fe-b45945d8c461"),
                            DiaSemana = "Martes",
                            DuracionClaseMinutos = 120,
                            EstadoHorario = "Activo",
                            FechaFinClases = new DateTime(2023, 4, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FechaInicioClases = new DateTime(2023, 1, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            GrupoSeccion = "Grupo B",
                            HoraFin = new TimeSpan(0, 16, 0, 0, 0),
                            HoraInicio = new TimeSpan(0, 14, 0, 0, 0),
                            NotificacionCambioHorario = "Sí",
                            PeriodoAcademico = "Semestre de Primavera",
                            ProfesorAsistente = "Profesor Asistente 2",
                            SalaAula = "Aula 203"
                        },
                        new
                        {
                            HorarioId = new Guid("d4b084ae-ac9e-424d-a5d4-20396c474862"),
                            DiaSemana = "Miércoles",
                            DuracionClaseMinutos = 120,
                            EstadoHorario = "Activo",
                            FechaFinClases = new DateTime(2023, 8, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FechaInicioClases = new DateTime(2023, 6, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            GrupoSeccion = "Grupo C",
                            HoraFin = new TimeSpan(0, 13, 30, 0, 0),
                            HoraInicio = new TimeSpan(0, 11, 30, 0, 0),
                            NotificacionCambioHorario = "No",
                            PeriodoAcademico = "Semestre de Verano",
                            ProfesorAsistente = "Profesor Asistente 3",
                            SalaAula = "Aula 305"
                        },
                        new
                        {
                            HorarioId = new Guid("7eb27728-e584-46b4-adc1-9a3eace613f4"),
                            DiaSemana = "Jueves",
                            DuracionClaseMinutos = 120,
                            EstadoHorario = "Activo",
                            FechaFinClases = new DateTime(2024, 3, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FechaInicioClases = new DateTime(2023, 11, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            GrupoSeccion = "Grupo D",
                            HoraFin = new TimeSpan(0, 18, 30, 0, 0),
                            HoraInicio = new TimeSpan(0, 16, 30, 0, 0),
                            NotificacionCambioHorario = "Sí",
                            PeriodoAcademico = "Semestre de Invierno",
                            ProfesorAsistente = "Profesor Asistente 4",
                            SalaAula = "Aula 401"
                        },
                        new
                        {
                            HorarioId = new Guid("36f151bd-cc88-42fc-b7a2-71d3e75b6579"),
                            DiaSemana = "Viernes",
                            DuracionClaseMinutos = 120,
                            EstadoHorario = "Activo",
                            FechaFinClases = new DateTime(2023, 4, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FechaInicioClases = new DateTime(2023, 1, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            GrupoSeccion = "Grupo E",
                            HoraFin = new TimeSpan(0, 10, 0, 0, 0),
                            HoraInicio = new TimeSpan(0, 8, 0, 0, 0),
                            NotificacionCambioHorario = "No",
                            PeriodoAcademico = "Semestre de Primavera",
                            ProfesorAsistente = "Profesor Asistente 5",
                            SalaAula = "Aula 102"
                        });
                });

            modelBuilder.Entity("Entities.Models.D_DepartamentoAcademico.Materias", b =>
                {
                    b.Property<Guid>("MateriaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("DepartamentoAcademico")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Descripcion")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Estado")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GrupoSeccionMateria")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MetodosEnsenanza")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ModalidadEnsenanza")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nivel")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nombre")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NotasAdicionales")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProfesorAsignado")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("MateriaId");

                    b.ToTable("Materias");

                    b.HasData(
                        new
                        {
                            MateriaId = new Guid("04e52085-89d3-4053-a6c2-dee9fbf5cdee"),
                            DepartamentoAcademico = "Departamento de Matemáticas",
                            Descripcion = "Curso de Matemáticas Avanzadas",
                            Estado = "En progreso",
                            GrupoSeccionMateria = "Grupo A",
                            MetodosEnsenanza = "Clases teóricas y prácticas",
                            ModalidadEnsenanza = "Presencial",
                            Nivel = "Avanzado",
                            Nombre = "Matemáticas",
                            NotasAdicionales = "Se requiere calculadora científica.",
                            ProfesorAsignado = "Profesor Matemático"
                        },
                        new
                        {
                            MateriaId = new Guid("b258699b-db45-44be-aa86-7b9e457b0bfc"),
                            DepartamentoAcademico = "Departamento de Historia",
                            Descripcion = "Curso de Historia Mundial",
                            Estado = "Inscripciones abiertas",
                            GrupoSeccionMateria = "Grupo B",
                            MetodosEnsenanza = "Conferencias y debates",
                            ModalidadEnsenanza = "Presencial",
                            Nivel = "Intermedio",
                            Nombre = "Historia",
                            NotasAdicionales = "Recomendado para estudiantes de Historia.",
                            ProfesorAsignado = "Profesor Historiador"
                        },
                        new
                        {
                            MateriaId = new Guid("67560243-6625-47b2-979b-2ceb87605fcc"),
                            DepartamentoAcademico = "Departamento de Informática",
                            Descripcion = "Curso de Ciencias de la Computación",
                            Estado = "En progreso",
                            GrupoSeccionMateria = "Grupo C",
                            MetodosEnsenanza = "Clases virtuales y proyectos prácticos",
                            ModalidadEnsenanza = "En línea",
                            Nivel = "Avanzado",
                            Nombre = "Ciencias de la Computación",
                            NotasAdicionales = "Requiere acceso a una computadora.",
                            ProfesorAsignado = "Profesor de Informática"
                        },
                        new
                        {
                            MateriaId = new Guid("256565eb-9dd8-483b-bb99-362a544ed06e"),
                            DepartamentoAcademico = "Departamento de Literatura",
                            Descripcion = "Curso de Literatura Universal",
                            Estado = "Inscripciones abiertas",
                            GrupoSeccionMateria = "Grupo D",
                            MetodosEnsenanza = "Lecturas y discusiones literarias",
                            ModalidadEnsenanza = "Presencial",
                            Nivel = "Intermedio",
                            Nombre = "Literatura",
                            NotasAdicionales = "Apto para amantes de la lectura.",
                            ProfesorAsignado = "Profesor Literario"
                        },
                        new
                        {
                            MateriaId = new Guid("26ccc9b3-c319-4e16-b6ad-28393ba5372e"),
                            DepartamentoAcademico = "Departamento de Física",
                            Descripcion = "Curso de Física Avanzada",
                            Estado = "Completo",
                            GrupoSeccionMateria = "Grupo E",
                            MetodosEnsenanza = "Experimentos y clases teóricas",
                            ModalidadEnsenanza = "Presencial",
                            Nivel = "Avanzado",
                            Nombre = "Física",
                            NotasAdicionales = "Requiere conocimientos previos de física.",
                            ProfesorAsignado = "Profesor de Física"
                        },
                        new
                        {
                            MateriaId = new Guid("bd769b1b-b3c8-478d-8c68-622055fd63cf"),
                            DepartamentoAcademico = "Departamento de Economía",
                            Descripcion = "Curso de Economía Moderna",
                            Estado = "En progreso",
                            GrupoSeccionMateria = "Grupo F",
                            MetodosEnsenanza = "Clases virtuales y análisis económico",
                            ModalidadEnsenanza = "En línea",
                            Nivel = "Intermedio",
                            Nombre = "Economía",
                            NotasAdicionales = "Abordaremos temas financieros actuales.",
                            ProfesorAsignado = "Profesor Economista"
                        },
                        new
                        {
                            MateriaId = new Guid("8abd2723-8ca8-4fdc-8aed-767c74bcd98e"),
                            DepartamentoAcademico = "Departamento de Arte",
                            Descripcion = "Curso de Arte Contemporáneo",
                            Estado = "Inscripciones abiertas",
                            GrupoSeccionMateria = "Grupo G",
                            MetodosEnsenanza = "Prácticas artísticas y exposiciones",
                            ModalidadEnsenanza = "Presencial",
                            Nivel = "Intermedio",
                            Nombre = "Arte",
                            NotasAdicionales = "No se requiere experiencia previa en arte.",
                            ProfesorAsignado = "Profesor de Arte"
                        });
                });

            modelBuilder.Entity("Entities.Models.D_Estudiante.CandidatoEstudiante", b =>
                {
                    b.Property<Guid>("CandidatoEstudianteId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Apellido")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("FechaNacimiento")
                        .HasColumnType("datetime2");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.Property<string>("TipoPersona")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CandidatoEstudianteId");

                    b.ToTable("CandidatoEstudiantes");

                    b.HasData(
                        new
                        {
                            CandidatoEstudianteId = new Guid("f57d3215-cc4f-4fe0-bd0a-0b344d76d254"),
                            Apellido = "Acuña",
                            FechaNacimiento = new DateTime(1995, 5, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Nombre = "Axl",
                            TipoPersona = "Estudiante"
                        },
                        new
                        {
                            CandidatoEstudianteId = new Guid("49409752-9e3b-429a-b0c0-fb70c6d49197"),
                            Apellido = "Castro",
                            FechaNacimiento = new DateTime(1990, 8, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Nombre = "Juan",
                            TipoPersona = "Estudiante"
                        },
                        new
                        {
                            CandidatoEstudianteId = new Guid("f888eafb-169c-45db-882f-976033143d8e"),
                            Apellido = "Sánchez",
                            FechaNacimiento = new DateTime(1987, 3, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Nombre = "Carlos",
                            TipoPersona = "Estudiante"
                        },
                        new
                        {
                            CandidatoEstudianteId = new Guid("f39fc767-56f9-417a-a746-371e3b69d9ea"),
                            Apellido = "López",
                            FechaNacimiento = new DateTime(2000, 11, 7, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Nombre = "Laura",
                            TipoPersona = "Estudiante"
                        },
                        new
                        {
                            CandidatoEstudianteId = new Guid("b0d1c69b-fe84-45bd-87e4-d1a2a34bfb42"),
                            Apellido = "Ramírez",
                            FechaNacimiento = new DateTime(1998, 9, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Nombre = "Pedro",
                            TipoPersona = "Estudiante"
                        },
                        new
                        {
                            CandidatoEstudianteId = new Guid("0836ac53-b431-407f-a370-8e68cf67b629"),
                            Apellido = "Martínez",
                            FechaNacimiento = new DateTime(1993, 7, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Nombre = "Ana",
                            TipoPersona = "Estudiante"
                        },
                        new
                        {
                            CandidatoEstudianteId = new Guid("9975a76b-cb45-48e7-b4f2-dd9e5fe2267b"),
                            Apellido = "Fernández",
                            FechaNacimiento = new DateTime(1989, 12, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Nombre = "Roberto",
                            TipoPersona = "Estudiante"
                        },
                        new
                        {
                            CandidatoEstudianteId = new Guid("4cb2eb42-eac8-446d-ac79-6df5cbc1843e"),
                            Apellido = "Gómez",
                            FechaNacimiento = new DateTime(1996, 2, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Nombre = "Isabel",
                            TipoPersona = "Estudiante"
                        },
                        new
                        {
                            CandidatoEstudianteId = new Guid("c46760ba-ec7e-4912-850d-d5cfe4eea0b4"),
                            Apellido = "Díaz",
                            FechaNacimiento = new DateTime(1991, 6, 14, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Nombre = "Francisco",
                            TipoPersona = "Estudiante"
                        },
                        new
                        {
                            CandidatoEstudianteId = new Guid("7055b6ac-7ec5-4c5c-aadf-9eb84b13c505"),
                            Apellido = "Hernández",
                            FechaNacimiento = new DateTime(1994, 4, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Nombre = "Sofía",
                            TipoPersona = "Estudiante"
                        });
                });

            modelBuilder.Entity("Entities.Models.D_Estudiante.Cupo", b =>
                {
                    b.Property<Guid>("CupoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("CantidadDisponible")
                        .HasColumnType("int");

                    b.Property<string>("Descripcion")
                        .HasColumnType("nvarchar(max)");

                    b.Property<TimeSpan>("Duracion")
                        .HasColumnType("time");

                    b.Property<bool>("Estado")
                        .HasColumnType("bit");

                    b.Property<DateTime>("FechaFin")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("FechaInicio")
                        .HasColumnType("datetime2");

                    b.Property<string>("Ubicacion")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CupoId");

                    b.ToTable("Cupo");

                    b.HasData(
                        new
                        {
                            CupoId = new Guid("e76cb355-4e59-4152-9ece-cfec11182782"),
                            CantidadDisponible = 10,
                            Descripcion = "Cupo para el evento principal",
                            Duracion = new TimeSpan(0, 2, 0, 0, 0),
                            Estado = true,
                            FechaFin = new DateTime(2024, 2, 29, 9, 34, 8, 91, DateTimeKind.Local).AddTicks(7057),
                            FechaInicio = new DateTime(2024, 1, 30, 9, 34, 8, 91, DateTimeKind.Local).AddTicks(7056),
                            Ubicacion = "Salón principal"
                        },
                        new
                        {
                            CupoId = new Guid("3c6f9b30-31f8-40a7-96cb-2ff6910dc0f8"),
                            CantidadDisponible = 5,
                            Descripcion = "Cupo para el taller de programación",
                            Duracion = new TimeSpan(0, 3, 0, 0, 0),
                            Estado = true,
                            FechaFin = new DateTime(2024, 3, 30, 9, 34, 8, 91, DateTimeKind.Local).AddTicks(7081),
                            FechaInicio = new DateTime(2024, 1, 30, 9, 34, 8, 91, DateTimeKind.Local).AddTicks(7080),
                            Ubicacion = "Aula 101"
                        },
                        new
                        {
                            CupoId = new Guid("94c253d8-be34-4937-ba13-93f0400356e4"),
                            CantidadDisponible = 20,
                            Descripcion = "Cupo para el seminario de marketing",
                            Duracion = new TimeSpan(0, 4, 0, 0, 0),
                            Estado = true,
                            FechaFin = new DateTime(2024, 4, 30, 9, 34, 8, 91, DateTimeKind.Local).AddTicks(7086),
                            FechaInicio = new DateTime(2024, 1, 30, 9, 34, 8, 91, DateTimeKind.Local).AddTicks(7085),
                            Ubicacion = "Aula 102"
                        },
                        new
                        {
                            CupoId = new Guid("d4bad599-4572-40f7-b9b4-958811b049ce"),
                            CantidadDisponible = 15,
                            Descripcion = "Cupo para el curso de diseño gráfico",
                            Duracion = new TimeSpan(0, 2, 0, 0, 0),
                            Estado = true,
                            FechaFin = new DateTime(2024, 5, 30, 9, 34, 8, 91, DateTimeKind.Local).AddTicks(7091),
                            FechaInicio = new DateTime(2024, 1, 30, 9, 34, 8, 91, DateTimeKind.Local).AddTicks(7090),
                            Ubicacion = "Aula 103"
                        },
                        new
                        {
                            CupoId = new Guid("cdca8211-078b-4bcc-a580-bc9d20562830"),
                            CantidadDisponible = 30,
                            Descripcion = "Cupo para el evento de networking",
                            Duracion = new TimeSpan(0, 1, 0, 0, 0),
                            Estado = true,
                            FechaFin = new DateTime(2024, 6, 30, 9, 34, 8, 91, DateTimeKind.Local).AddTicks(7096),
                            FechaInicio = new DateTime(2024, 1, 30, 9, 34, 8, 91, DateTimeKind.Local).AddTicks(7095),
                            Ubicacion = "Aula 104"
                        });
                });

            modelBuilder.Entity("Entities.Models.D_Estudiante.EstudianteDocumentos", b =>
                {
                    b.Property<Guid>("EstudianteDocumentosId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CandidatoEstudianteId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Estado")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("FechaActualizacion")
                        .HasColumnType("datetime2");

                    b.Property<string>("NombreDocumento")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("NumeroDocumento")
                        .HasColumnType("int");

                    b.Property<string>("Observaciones")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Tamaño")
                        .HasColumnType("int");

                    b.Property<string>("TipoDocumento")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Ubicacion")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("EstudianteDocumentosId");

                    b.ToTable("EstudianteDocumentos");

                    b.HasData(
                        new
                        {
                            EstudianteDocumentosId = new Guid("6a30c846-4b9d-4cf5-bb17-051a3e9d1b72"),
                            CandidatoEstudianteId = new Guid("c9d4c053-49b6-410c-bc78-2d54a999187f"),
                            Estado = true,
                            NombreDocumento = "Certificado de Nacimiento",
                            NumeroDocumento = 61464465,
                            Observaciones = "Ninguna",
                            Tamaño = 1024,
                            TipoDocumento = "Identificación",
                            Ubicacion = "ruta/al/documento1"
                        },
                        new
                        {
                            EstudianteDocumentosId = new Guid("2d54a999-187f-4a8c-99db-d17841e7938c"),
                            CandidatoEstudianteId = new Guid("3d490a70-94ce-4d15-9494-5248280c2ce3"),
                            Estado = true,
                            FechaActualizacion = new DateTime(2024, 1, 30, 9, 34, 8, 91, DateTimeKind.Local).AddTicks(5603),
                            NombreDocumento = "Diploma",
                            NumeroDocumento = 987654,
                            Observaciones = "Logros académicos",
                            Tamaño = 2048,
                            TipoDocumento = "Educativo",
                            Ubicacion = "ruta/al/documento2"
                        },
                        new
                        {
                            EstudianteDocumentosId = new Guid("3e68515e-3a47-4a62-a8c7-9f12242d020e"),
                            CandidatoEstudianteId = new Guid("4f3657e5-5824-47b8-b4cd-6f49a3f4dbf1"),
                            Estado = false,
                            FechaActualizacion = new DateTime(2024, 1, 30, 9, 34, 8, 91, DateTimeKind.Local).AddTicks(5623),
                            NombreDocumento = "Certificado de Graduación",
                            NumeroDocumento = 123456,
                            Observaciones = "Graduación universitaria",
                            Tamaño = 1536,
                            TipoDocumento = "Educativo",
                            Ubicacion = "ruta/al/documento3"
                        },
                        new
                        {
                            EstudianteDocumentosId = new Guid("4a303cce-8c0e-4ae7-89c1-067d0b7741b6"),
                            CandidatoEstudianteId = new Guid("3e68515e-3a47-4a62-a8c7-9f12242d020e"),
                            Estado = true,
                            FechaActualizacion = new DateTime(2024, 1, 30, 9, 34, 8, 91, DateTimeKind.Local).AddTicks(5628),
                            NombreDocumento = "Certificado de Matrícula",
                            NumeroDocumento = 789012,
                            Observaciones = "Matrícula escolar",
                            Tamaño = 8192,
                            TipoDocumento = "Educativo",
                            Ubicacion = "ruta/al/documento4"
                        },
                        new
                        {
                            EstudianteDocumentosId = new Guid("5f78d0e1-579e-4dfc-82a1-92010b4191d3"),
                            CandidatoEstudianteId = new Guid("31eb541a-9419-4eac-bf1b-0289a6c6f6f0"),
                            Estado = true,
                            FechaActualizacion = new DateTime(2024, 1, 30, 9, 34, 8, 91, DateTimeKind.Local).AddTicks(5632),
                            NombreDocumento = "Cédula de Identidad",
                            NumeroDocumento = 555555,
                            Observaciones = "Documento oficial",
                            Tamaño = 4096,
                            TipoDocumento = "Identificación",
                            Ubicacion = "ruta/al/documento5"
                        },
                        new
                        {
                            EstudianteDocumentosId = new Guid("f38f6b1a-86e9-4d9d-8a7a-62f17e6f1ba2"),
                            CandidatoEstudianteId = new Guid("7f255218-f8e0-45a9-9807-12e1bcfd438c"),
                            Estado = true,
                            FechaActualizacion = new DateTime(2024, 1, 30, 9, 34, 8, 91, DateTimeKind.Local).AddTicks(5637),
                            NombreDocumento = "Carné de Estudiante",
                            NumeroDocumento = 7890123,
                            Observaciones = "Carné escolar",
                            Tamaño = 3072,
                            TipoDocumento = "Identificación",
                            Ubicacion = "ruta/al/documento6"
                        },
                        new
                        {
                            EstudianteDocumentosId = new Guid("7e15d9a4-98cb-4d14-9a35-862f8c202725"),
                            CandidatoEstudianteId = new Guid("bb9b0679-4f04-4ac4-9ddc-5c3e50e81298"),
                            Estado = true,
                            FechaActualizacion = new DateTime(2024, 1, 30, 9, 34, 8, 91, DateTimeKind.Local).AddTicks(5642),
                            NombreDocumento = "Boleta de Calificaciones",
                            NumeroDocumento = 9876543,
                            Observaciones = "Registro académico",
                            Tamaño = 5120,
                            TipoDocumento = "Educativo",
                            Ubicacion = "ruta/al/documento7"
                        },
                        new
                        {
                            EstudianteDocumentosId = new Guid("8f4a67c2-fd5e-4316-8c50-7249f159d0f1"),
                            CandidatoEstudianteId = new Guid("a6509bea-688e-43b5-a870-6ee461ccf601"),
                            Estado = true,
                            FechaActualizacion = new DateTime(2024, 1, 30, 9, 34, 8, 91, DateTimeKind.Local).AddTicks(5646),
                            NombreDocumento = "Pasaporte",
                            NumeroDocumento = 1234567,
                            Observaciones = "Documento de viaje",
                            Tamaño = 4096,
                            TipoDocumento = "Identificación",
                            Ubicacion = "ruta/al/documento8"
                        },
                        new
                        {
                            EstudianteDocumentosId = new Guid("9b9d6d8f-72f0-4f0a-8e18-1e75b0182e3f"),
                            CandidatoEstudianteId = new Guid("db9fcac5-8654-45c3-87c7-8b5e13e9e6c2"),
                            Estado = true,
                            FechaActualizacion = new DateTime(2024, 1, 30, 9, 34, 8, 91, DateTimeKind.Local).AddTicks(5651),
                            NombreDocumento = "Certificado Médico",
                            NumeroDocumento = 543210,
                            Observaciones = "Informe médico",
                            Tamaño = 2048,
                            TipoDocumento = "Salud",
                            Ubicacion = "ruta/al/documento9"
                        },
                        new
                        {
                            EstudianteDocumentosId = new Guid("10a5e754-1570-4be0-8650-2c53d7cfb4d3"),
                            CandidatoEstudianteId = new Guid("b3b5a5a7-5b82-4f76-98c1-654589db8f61"),
                            Estado = true,
                            FechaActualizacion = new DateTime(2024, 1, 30, 9, 34, 8, 91, DateTimeKind.Local).AddTicks(5656),
                            NombreDocumento = "Fotografía del Estudiante",
                            NumeroDocumento = 1111111,
                            Observaciones = "Foto de perfil",
                            Tamaño = 1024,
                            TipoDocumento = "Identificación",
                            Ubicacion = "ruta/al/documento10"
                        });
                });

            modelBuilder.Entity("Entities.Models.D_Notas.Asistencia", b =>
                {
                    b.Property<int>("AsistenciaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AsistenciaId"));

                    b.Property<bool>("Asistio")
                        .HasColumnType("bit");

                    b.Property<DateTime>("FechaHoraAsistencia")
                        .HasColumnType("datetime2");

                    b.Property<string>("NombreAsistente")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Notas")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TipoEvento")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UbicacionEvento")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AsistenciaId");

                    b.ToTable("Asistencia");

                    b.HasData(
                        new
                        {
                            AsistenciaId = 1,
                            Asistio = true,
                            FechaHoraAsistencia = new DateTime(2023, 10, 3, 9, 0, 0, 0, DateTimeKind.Unspecified),
                            NombreAsistente = "Juan Pérez",
                            Notas = "Asistió puntualmente.",
                            TipoEvento = "Conferencia",
                            UbicacionEvento = "Salón A"
                        },
                        new
                        {
                            AsistenciaId = 2,
                            Asistio = false,
                            FechaHoraAsistencia = new DateTime(2023, 10, 4, 15, 30, 0, 0, DateTimeKind.Unspecified),
                            NombreAsistente = "María Rodríguez",
                            Notas = "No pudo asistir debido a un compromiso previo.",
                            TipoEvento = "Reunión",
                            UbicacionEvento = "Sala de juntas"
                        },
                        new
                        {
                            AsistenciaId = 3,
                            Asistio = true,
                            FechaHoraAsistencia = new DateTime(2023, 10, 5, 14, 0, 0, 0, DateTimeKind.Unspecified),
                            NombreAsistente = "Carlos González",
                            Notas = "Participó activamente en el taller.",
                            TipoEvento = "Taller",
                            UbicacionEvento = "Aula 101"
                        },
                        new
                        {
                            AsistenciaId = 4,
                            Asistio = true,
                            FechaHoraAsistencia = new DateTime(2023, 10, 6, 10, 30, 0, 0, DateTimeKind.Unspecified),
                            NombreAsistente = "Ana López",
                            Notas = "Tomó notas detalladas durante la conferencia.",
                            TipoEvento = "Conferencia",
                            UbicacionEvento = "Salón B"
                        },
                        new
                        {
                            AsistenciaId = 5,
                            Asistio = true,
                            FechaHoraAsistencia = new DateTime(2023, 10, 7, 18, 0, 0, 0, DateTimeKind.Unspecified),
                            NombreAsistente = "Pedro Ramírez",
                            Notas = "Participó en la discusión de temas importantes.",
                            TipoEvento = "Reunión",
                            UbicacionEvento = "Sala de conferencias"
                        },
                        new
                        {
                            AsistenciaId = 6,
                            Asistio = true,
                            FechaHoraAsistencia = new DateTime(2023, 10, 8, 11, 45, 0, 0, DateTimeKind.Unspecified),
                            NombreAsistente = "Laura Martínez",
                            Notas = "Hizo preguntas interesantes durante el seminario.",
                            TipoEvento = "Seminario",
                            UbicacionEvento = "Auditorio"
                        });
                });

            modelBuilder.Entity("Entities.Models.D_Notas.Estadisticas", b =>
                {
                    b.Property<int>("EstadisticaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EstadisticaId"));

                    b.Property<int>("AñoEscolar")
                        .HasColumnType("int");

                    b.Property<int>("CantidadExamenes")
                        .HasColumnType("int");

                    b.Property<DateTime>("FechaRegistro")
                        .HasColumnType("datetime2");

                    b.Property<string>("Materia")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("NotaMaxima")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("NotaMinima")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("NotaPromedio")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("PeriodoEscolar")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("EstadisticaId");

                    b.ToTable("Estadisticas");

                    b.HasData(
                        new
                        {
                            EstadisticaId = 1,
                            AñoEscolar = 2023,
                            CantidadExamenes = 5,
                            FechaRegistro = new DateTime(2024, 1, 30, 9, 34, 8, 92, DateTimeKind.Local).AddTicks(398),
                            Materia = "Matemáticas",
                            NotaMaxima = 9.0m,
                            NotaMinima = 7.5m,
                            NotaPromedio = 8.5m,
                            PeriodoEscolar = "Primer Trimestre"
                        },
                        new
                        {
                            EstadisticaId = 2,
                            AñoEscolar = 2023,
                            CantidadExamenes = 4,
                            FechaRegistro = new DateTime(2024, 1, 30, 9, 34, 8, 92, DateTimeKind.Local).AddTicks(403),
                            Materia = "Ciencias",
                            NotaMaxima = 8.5m,
                            NotaMinima = 6.5m,
                            NotaPromedio = 7.8m,
                            PeriodoEscolar = "Segundo Trimestre"
                        },
                        new
                        {
                            EstadisticaId = 3,
                            AñoEscolar = 2023,
                            CantidadExamenes = 3,
                            FechaRegistro = new DateTime(2024, 1, 30, 9, 34, 8, 92, DateTimeKind.Local).AddTicks(407),
                            Materia = "Historia",
                            NotaMaxima = 9.5m,
                            NotaMinima = 8.5m,
                            NotaPromedio = 9.2m,
                            PeriodoEscolar = "Tercer Trimestre"
                        },
                        new
                        {
                            EstadisticaId = 4,
                            AñoEscolar = 2023,
                            CantidadExamenes = 5,
                            FechaRegistro = new DateTime(2024, 1, 30, 9, 34, 8, 92, DateTimeKind.Local).AddTicks(410),
                            Materia = "Lenguaje",
                            NotaMaxima = 8.0m,
                            NotaMinima = 6.0m,
                            NotaPromedio = 7.2m,
                            PeriodoEscolar = "Primer Semestre"
                        },
                        new
                        {
                            EstadisticaId = 5,
                            AñoEscolar = 2023,
                            CantidadExamenes = 2,
                            FechaRegistro = new DateTime(2024, 1, 30, 9, 34, 8, 92, DateTimeKind.Local).AddTicks(413),
                            Materia = "Arte",
                            NotaMaxima = 9.0m,
                            NotaMinima = 8.0m,
                            NotaPromedio = 8.7m,
                            PeriodoEscolar = "Segundo Semestre"
                        },
                        new
                        {
                            EstadisticaId = 6,
                            AñoEscolar = 2023,
                            CantidadExamenes = 3,
                            FechaRegistro = new DateTime(2024, 1, 30, 9, 34, 8, 92, DateTimeKind.Local).AddTicks(416),
                            Materia = "Educación Física",
                            NotaMaxima = 10.0m,
                            NotaMinima = 9.0m,
                            NotaPromedio = 9.5m,
                            PeriodoEscolar = "Trimestre Extra"
                        });
                });

            modelBuilder.Entity("Entities.Models.Matricula", b =>
                {
                    b.Property<Guid>("MatriculaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CategoriaMatricula")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Comentarios")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EstadoMatricula")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("FechaMatricula")
                        .HasColumnType("datetime2");

                    b.Property<string>("InformacionPlanEstudios")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PeriodoAcademico")
                        .HasColumnType("int");

                    b.Property<string>("RegistroCambios")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TipoMatricula")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("MatriculaId");

                    b.ToTable("Matricula");

                    b.HasData(
                        new
                        {
                            MatriculaId = new Guid("030f8ddd-63b4-4e86-9872-48213adeb5a5"),
                            CategoriaMatricula = "Estudiante de Tiempo Completo",
                            Comentarios = "Comentario sobre la matrícula 1",
                            EstadoMatricula = "Activa",
                            FechaMatricula = new DateTime(2024, 1, 30, 9, 34, 8, 91, DateTimeKind.Local).AddTicks(8124),
                            InformacionPlanEstudios = "Plan de estudios 2023",
                            PeriodoAcademico = 2024,
                            RegistroCambios = "Registro de cambios 1",
                            TipoMatricula = "Matrícula Regular"
                        },
                        new
                        {
                            MatriculaId = new Guid("53497f2b-6047-4422-a072-c4bb55071cd1"),
                            CategoriaMatricula = "Estudiante de Tiempo Parcial",
                            Comentarios = "Comentario sobre la matrícula 2",
                            EstadoMatricula = "Pendiente",
                            FechaMatricula = new DateTime(2024, 2, 29, 9, 34, 8, 91, DateTimeKind.Local).AddTicks(8131),
                            InformacionPlanEstudios = "Plan de estudios 2023",
                            PeriodoAcademico = 2024,
                            RegistroCambios = "Registro de cambios 2",
                            TipoMatricula = "Matrícula Parcial"
                        },
                        new
                        {
                            MatriculaId = new Guid("0a5f6a6a-052a-4885-ba55-1be112c1be0d"),
                            CategoriaMatricula = "Estudiante Internacional",
                            Comentarios = "Comentario sobre la matrícula 3",
                            EstadoMatricula = "Cancelada",
                            FechaMatricula = new DateTime(2024, 3, 30, 9, 34, 8, 91, DateTimeKind.Local).AddTicks(8136),
                            InformacionPlanEstudios = "Plan de estudios 2023",
                            PeriodoAcademico = 2024,
                            RegistroCambios = "Registro de cambios 3",
                            TipoMatricula = "Matrícula Regular"
                        },
                        new
                        {
                            MatriculaId = new Guid("2b0e549b-6eb8-47ed-8444-7a9d8e8d3871"),
                            CategoriaMatricula = "Estudiante de Tiempo Completo",
                            Comentarios = "Comentario sobre la matrícula 4",
                            EstadoMatricula = "Activa",
                            FechaMatricula = new DateTime(2024, 4, 30, 9, 34, 8, 91, DateTimeKind.Local).AddTicks(8141),
                            InformacionPlanEstudios = "Plan de estudios 2023",
                            PeriodoAcademico = 2024,
                            RegistroCambios = "Registro de cambios 4",
                            TipoMatricula = "Matrícula Regular"
                        },
                        new
                        {
                            MatriculaId = new Guid("4cf41d02-83dd-48cd-a8c1-f9ea4f65233f"),
                            CategoriaMatricula = "Estudiante de Tiempo Completo",
                            Comentarios = "Comentario sobre la matrícula 5",
                            EstadoMatricula = "Activa",
                            FechaMatricula = new DateTime(2024, 5, 30, 9, 34, 8, 91, DateTimeKind.Local).AddTicks(8146),
                            InformacionPlanEstudios = "Plan de estudios 2023",
                            PeriodoAcademico = 2024,
                            RegistroCambios = "Registro de cambios 5",
                            TipoMatricula = "Matrícula Regular"
                        });
                });

            modelBuilder.Entity("Entities.Models.PreMatricula", b =>
                {
                    b.Property<Guid>("PreMatriculaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("EstadoPreMatricula")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GradoONivel")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Observaciones")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RequisitosDocumentacion")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Turno")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PreMatriculaId");

                    b.ToTable("PreMatricula");

                    b.HasData(
                        new
                        {
                            PreMatriculaId = new Guid("e2003266-ef8f-4a96-a780-f66c448480f3"),
                            EstadoPreMatricula = "Pendiente",
                            GradoONivel = "Quinto de Primaria",
                            Observaciones = "Estudiante con requerimientos especiales.",
                            RequisitosDocumentacion = "NoCumplio",
                            Turno = "Mañana"
                        },
                        new
                        {
                            PreMatriculaId = new Guid("eb5c2b07-a105-4d70-b327-48bae638caa0"),
                            EstadoPreMatricula = "Activa",
                            GradoONivel = "Séptimo de Secundaria",
                            Observaciones = "Estudiante de transferencia.",
                            RequisitosDocumentacion = "SiCumplio",
                            Turno = "Tarde"
                        },
                        new
                        {
                            PreMatriculaId = new Guid("b89064ad-d771-455d-af95-2f992b58e2c6"),
                            EstadoPreMatricula = "Pendiente",
                            GradoONivel = "Tercero de Primaria",
                            Observaciones = "Estudiante extranjero.",
                            RequisitosDocumentacion = "SiCumplio",
                            Turno = "Mañana"
                        },
                        new
                        {
                            PreMatriculaId = new Guid("7b8f1193-3097-44d3-8103-06450d90110a"),
                            EstadoPreMatricula = "Activa",
                            GradoONivel = "Cuarto de Secundaria",
                            Observaciones = "Estudiante con beca deportiva.",
                            RequisitosDocumentacion = "SiCumplio",
                            Turno = "Tarde"
                        },
                        new
                        {
                            PreMatriculaId = new Guid("4fb8157e-2554-498f-a34f-ae5065a06991"),
                            EstadoPreMatricula = "Activa",
                            GradoONivel = "Segundo de Primaria",
                            Observaciones = "Estudiante con discapacidad visual.",
                            RequisitosDocumentacion = "SiCumplio",
                            Turno = "Mañana"
                        },
                        new
                        {
                            PreMatriculaId = new Guid("ffc62a15-35be-41f4-b98a-056d1bdd732f"),
                            EstadoPreMatricula = "Pendiente",
                            GradoONivel = "Octavo de Secundaria",
                            Observaciones = "Estudiante sin observaciones adicionales.",
                            RequisitosDocumentacion = "Si cumplio",
                            Turno = "Tarde"
                        });
                });

            modelBuilder.Entity("Entities.Models.RespuestaCupo", b =>
                {
                    b.Property<Guid>("RespuestaCupoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<TimeSpan>("DuracionRespuesta")
                        .HasColumnType("time");

                    b.Property<string>("EstadoRespuesta")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("FechaRespuesta")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("FechaVencimiento")
                        .HasColumnType("datetime2");

                    b.Property<string>("MensajeRespuesta")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Prioridad")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TipoRespuesta")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UsuarioRespuesta")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("RespuestaCupoId");

                    b.ToTable("RespuestaCupo");

                    b.HasData(
                        new
                        {
                            RespuestaCupoId = new Guid("5dff8d92-73c7-42cb-9af6-b6d51f3bcc1b"),
                            DuracionRespuesta = new TimeSpan(30, 0, 0, 0, 0),
                            EstadoRespuesta = "Aceptada",
                            FechaRespuesta = new DateTime(2024, 1, 31, 9, 34, 8, 91, DateTimeKind.Local).AddTicks(7410),
                            FechaVencimiento = new DateTime(2024, 2, 29, 9, 34, 8, 91, DateTimeKind.Local).AddTicks(7416),
                            MensajeRespuesta = "Respuesta 1",
                            Prioridad = "Alta",
                            TipoRespuesta = "Aceptación",
                            UsuarioRespuesta = "Usuario1"
                        },
                        new
                        {
                            RespuestaCupoId = new Guid("888bade6-2edc-4379-9f7d-0b721ff43b36"),
                            DuracionRespuesta = new TimeSpan(45, 0, 0, 0, 0),
                            EstadoRespuesta = "Rechazada",
                            FechaRespuesta = new DateTime(2024, 2, 1, 9, 34, 8, 91, DateTimeKind.Local).AddTicks(7425),
                            FechaVencimiento = new DateTime(2024, 3, 30, 9, 34, 8, 91, DateTimeKind.Local).AddTicks(7427),
                            MensajeRespuesta = "Respuesta 2",
                            Prioridad = "Media",
                            TipoRespuesta = "Rechazo",
                            UsuarioRespuesta = "Usuario2"
                        },
                        new
                        {
                            RespuestaCupoId = new Guid("da73ae1c-8b9f-41d8-8d64-0f22f96aee9c"),
                            DuracionRespuesta = new TimeSpan(60, 0, 0, 0, 0),
                            EstadoRespuesta = "Pendiente",
                            FechaRespuesta = new DateTime(2024, 2, 2, 9, 34, 8, 91, DateTimeKind.Local).AddTicks(7431),
                            FechaVencimiento = new DateTime(2024, 4, 30, 9, 34, 8, 91, DateTimeKind.Local).AddTicks(7432),
                            MensajeRespuesta = "Respuesta 3",
                            Prioridad = "Baja",
                            TipoRespuesta = "Pendiente",
                            UsuarioRespuesta = "Usuario3"
                        },
                        new
                        {
                            RespuestaCupoId = new Guid("ecf23155-ecd9-4e58-8670-39eeaf42016c"),
                            DuracionRespuesta = new TimeSpan(30, 0, 0, 0, 0),
                            EstadoRespuesta = "Aceptada",
                            FechaRespuesta = new DateTime(2024, 2, 3, 9, 34, 8, 91, DateTimeKind.Local).AddTicks(7436),
                            FechaVencimiento = new DateTime(2024, 5, 30, 9, 34, 8, 91, DateTimeKind.Local).AddTicks(7437),
                            MensajeRespuesta = "Respuesta 4",
                            Prioridad = "Alta",
                            TipoRespuesta = "Aceptación",
                            UsuarioRespuesta = "Usuario4"
                        },
                        new
                        {
                            RespuestaCupoId = new Guid("249f90ab-b016-4fc8-b44f-647586233694"),
                            DuracionRespuesta = new TimeSpan(45, 0, 0, 0, 0),
                            EstadoRespuesta = "Rechazada",
                            FechaRespuesta = new DateTime(2024, 2, 4, 9, 34, 8, 91, DateTimeKind.Local).AddTicks(7443),
                            FechaVencimiento = new DateTime(2024, 6, 30, 9, 34, 8, 91, DateTimeKind.Local).AddTicks(7444),
                            MensajeRespuesta = "Respuesta 5",
                            Prioridad = "Media",
                            TipoRespuesta = "Rechazo",
                            UsuarioRespuesta = "Usuario5"
                        },
                        new
                        {
                            RespuestaCupoId = new Guid("decc16ff-aec2-4f06-ab6e-75d2c38abab6"),
                            DuracionRespuesta = new TimeSpan(30, 0, 0, 0, 0),
                            EstadoRespuesta = "Aceptada",
                            FechaRespuesta = new DateTime(2024, 2, 5, 9, 34, 8, 91, DateTimeKind.Local).AddTicks(7448),
                            FechaVencimiento = new DateTime(2024, 7, 30, 9, 34, 8, 91, DateTimeKind.Local).AddTicks(7449),
                            MensajeRespuesta = "Respuesta 6",
                            Prioridad = "Alta",
                            TipoRespuesta = "Aceptación",
                            UsuarioRespuesta = "Usuario6"
                        },
                        new
                        {
                            RespuestaCupoId = new Guid("56065618-28f6-4009-9194-53ad92d0566c"),
                            DuracionRespuesta = new TimeSpan(45, 0, 0, 0, 0),
                            EstadoRespuesta = "Rechazada",
                            FechaRespuesta = new DateTime(2024, 2, 6, 9, 34, 8, 91, DateTimeKind.Local).AddTicks(7453),
                            FechaVencimiento = new DateTime(2024, 8, 30, 9, 34, 8, 91, DateTimeKind.Local).AddTicks(7454),
                            MensajeRespuesta = "Respuesta 7",
                            Prioridad = "Media",
                            TipoRespuesta = "Rechazo",
                            UsuarioRespuesta = "Usuario7"
                        },
                        new
                        {
                            RespuestaCupoId = new Guid("f5dc5219-e91e-4c2a-bf8c-9a9576857853"),
                            DuracionRespuesta = new TimeSpan(60, 0, 0, 0, 0),
                            EstadoRespuesta = "Pendiente",
                            FechaRespuesta = new DateTime(2024, 2, 7, 9, 34, 8, 91, DateTimeKind.Local).AddTicks(7457),
                            FechaVencimiento = new DateTime(2024, 9, 30, 9, 34, 8, 91, DateTimeKind.Local).AddTicks(7459),
                            MensajeRespuesta = "Respuesta 8",
                            Prioridad = "Baja",
                            TipoRespuesta = "Pendiente",
                            UsuarioRespuesta = "Usuario8"
                        },
                        new
                        {
                            RespuestaCupoId = new Guid("72d4463e-11f5-4d45-9390-9865fc078028"),
                            DuracionRespuesta = new TimeSpan(30, 0, 0, 0, 0),
                            EstadoRespuesta = "Aceptada",
                            FechaRespuesta = new DateTime(2024, 2, 8, 9, 34, 8, 91, DateTimeKind.Local).AddTicks(7462),
                            FechaVencimiento = new DateTime(2024, 10, 30, 9, 34, 8, 91, DateTimeKind.Local).AddTicks(7463),
                            MensajeRespuesta = "Respuesta 9",
                            Prioridad = "Alta",
                            TipoRespuesta = "Aceptación",
                            UsuarioRespuesta = "Usuario9"
                        });
                });
#pragma warning restore 612, 618
        }
    }
}
